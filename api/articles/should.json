{"title":"should 问题记录","uid":"1b9460a162c49b16fb160e6d1e730cf3","slug":"should","date":"2022-03-29T16:00:00.000Z","updated":"2022-09-28T07:19:23.111Z","comments":true,"path":"api/articles/should.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1648621531227.png","content":"<h1 id=\"Should-js-使用问题记录\"><a href=\"#Should-js-使用问题记录\" class=\"headerlink\" title=\"Should.js 使用问题记录\"></a>Should.js 使用问题记录</h1><h2 id=\"should-extend-方法\"><a href=\"#should-extend-方法\" class=\"headerlink\" title=\"should.extend 方法\"></a>should.extend 方法</h2><p>should 的基本原理就是在 Object.prototype 上定义一个 should 对象，拦截 get，进行特殊处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">should$1.extend &#x3D; function (propertyName, proto) &#123;\n  propertyName &#x3D; propertyName || &quot;should&quot;;\n  proto &#x3D; proto || Object.prototype;\n\n  var prevDescriptor &#x3D; Object.getOwnPropertyDescriptor(proto, propertyName);\n\n  Object.defineProperty(proto, propertyName, &#123;\n    set: function () &#123;\n    &#125;,\n    get: function () &#123;\n      return should$1(isWrapperType(this) ? this.valueOf() : this);\n    &#125;,\n    configurable: true\n  &#125;);\n\n  return &#123;name: propertyName, descriptor: prevDescriptor, proto: proto&#125;;\n&#125;;</code></pre>\n\n<h2 id=\"should-noConflict-方法\"><a href=\"#should-noConflict-方法\" class=\"headerlink\" title=\"should.noConflict 方法\"></a>should.noConflict 方法</h2><p>删除掉对象中 <strong>proto</strong> 中的 should 对象，取消 should 对属性读取的拦截</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">should$1.noConflict &#x3D; function (desc) &#123;\n  desc &#x3D; desc || should$1._prevShould;\n\n  if (desc) &#123;\n    delete desc.proto[desc.name];\n\n    if (desc.descriptor) &#123;\n      Object.defineProperty(desc.proto, desc.name, desc.descriptor);\n    &#125;\n  &#125;\n  return should$1;\n&#125;;</code></pre>\n\n<h2 id=\"导致的问题\"><a href=\"#导致的问题\" class=\"headerlink\" title=\"导致的问题\"></a>导致的问题</h2><p>如果代码中有一个对象中，想要额外增加一个 should 的属性，正好重名，那就永远访问也不能覆盖掉这个should。 这时就会导致代码中缺少了 should 中的对象，导致代码出错。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">require(&#39;should&#39;)\n\nconst a &#x3D; &#123;\n  a: 1,\n  b: 2,\n&#125;\n\n&#x2F;&#x2F; 此时的 should 是 should.Assertion 对象，无法重新赋值\na.should &#x3D; &#123;\n  a: 1,\n  b: 2\n&#125;\n\nconsole.log(a)\n&#x2F;&#x2F; 打印结果\n&#x2F;&#x2F; &#123;a: 1,b: 2&#125;</code></pre>\n\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const should &#x3D; require(&#39;should&#39;)\n\n&#x2F;&#x2F; 关闭 should 的拦截，保证这次测试可以使用\nshould.noConflict()\nconst a &#x3D; &#123;\n  a: 1,\n  b: 2,\n&#125;\n\na.should &#x3D; &#123;\n  a: 1,\n  b: 2\n&#125;\n\nconsole.log(a)\n&#x2F;&#x2F; &#123; a: 1, b: 2, should: &#123; a: 1, b: 2 &#125; &#125;\n\n&#x2F;&#x2F; 重新开启 should 的拦截，保证后续的测试可以继续使用 should\nshould.extend()\n</code></pre>\n","text":"Should.js 使用问题记录should.extend 方法should 的基本原理就是在 Object.prototype 上定义一个 should 对象，拦截 get，进行特殊处理。 should$1.extend &#x3D; function (propertyNam...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"原理","slug":"原理","count":2,"path":"api/categories/原理.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"TEST","slug":"TEST","count":1,"path":"api/tags/TEST.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Should-js-%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">Should.js 使用问题记录</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#should-extend-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">should.extend 方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#should-noConflict-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">should.noConflict 方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">导致的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">解决办法</span></a></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"VueRouter 中重定向到动态的 path","uid":"c72fb498b1064492902648005ad6e6d9","slug":"vueRouter","date":"2022-05-12T16:00:00.000Z","updated":"2022-09-28T07:19:23.112Z","comments":true,"path":"api/articles/vueRouter.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652424063992.png","text":"VueRouter背景在 vue-router 中，重定向到某个页面采用下面的配置 const routes &#x3D; [ &#123; path: &#39;&#x2F;test&#39;, redirect: &#39;&#x2F;aaa&#39;, &#125;, ] ...","link":"","photos":[],"count_time":{"symbolsCount":801,"symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":4,"path":"api/categories/前端.json"}],"tags":[{"name":"VUE","slug":"VUE","count":2,"path":"api/tags/VUE.json"},{"name":"VUE_ROUTER","slug":"VUE-ROUTER","count":1,"path":"api/tags/VUE-ROUTER.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}},"next_post":{"title":"GITHUB Action","uid":"c20284a31a34295c2d86d295e5cf6162","slug":"githubActionPublishNpmPackage","date":"2022-03-17T16:00:00.000Z","updated":"2022-09-28T07:19:23.109Z","comments":true,"path":"api/articles/githubActionPublishNpmPackage.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224111154475.png","text":"GitHub action自动发布 NPM 包npm 配置 access token点击 npm 用户头像，选择 access tokens 点击 generate new token 选择 publish 点击 generate token 复制 token github 项目...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"教程","slug":"教程","count":5,"path":"api/categories/教程.json"}],"tags":[{"name":"GITHUB","slug":"GITHUB","count":1,"path":"api/tags/GITHUB.json"},{"name":"NPM","slug":"NPM","count":2,"path":"api/tags/NPM.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}}}