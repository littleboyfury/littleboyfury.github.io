{"title":"Eslint 自定义插件","uid":"42123ec318c96fdfb65cd843c0240696","slug":"eslintRule","date":"2024-01-16T16:00:00.000Z","updated":"2024-01-17T05:56:28.940Z","comments":true,"path":"api/articles/eslintRule.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/img_convert/a50aea96f76e5e1446c155a55a759a46.png","content":"<h1 id=\"Eslint-自定义插件\"><a href=\"#Eslint-自定义插件\" class=\"headerlink\" title=\"Eslint 自定义插件\"></a>Eslint 自定义插件</h1><h2 id=\"需求来源\"><a href=\"#需求来源\" class=\"headerlink\" title=\"需求来源\"></a>需求来源</h2><p>在整理 import 的时候，发现 <code>&#123;&#125;</code> 中属性换行调整不到想要的结果。</p>\n<p>例如:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 编写的代码\nimport &#123;A, B, C&#125; from &#39;xxx&#39;\n\n&#x2F;&#x2F; 期望格式化后的结果\nimport &#123;\n  A,\n  B,\n  C\n&#125; from &#39;xxx&#39;\n\n&#x2F;&#x2F; object-curly-newline 规则的结果，我期望的是每一行一个属性\n&#x2F;&#x2F; &#39;object-curly-newline&#39;: [\n&#x2F;&#x2F;   &#39;error&#39;,\n&#x2F;&#x2F;   &#123;\n&#x2F;&#x2F;     ImportDeclaration: &#123;\n&#x2F;&#x2F;       multiline: true,\n&#x2F;&#x2F;       minProperties: 3,\n&#x2F;&#x2F;     &#125;,\n&#x2F;&#x2F;   &#125;\n&#x2F;&#x2F; ]\nimport &#123;\n  A, B, C\n&#125; from &#39;xxx&#39;</code></pre>\n\n<p>于是打算自己实现一个 eslint plugin 来实现该功能。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>根据 eslint plugin 文档，创建项目结构，eslint 有自带的工具 <code>yo</code>，这里就没用使用，其实是一个道理。</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">├── README.md\n├── build.js\n├── jest.config.js\n├── lib\n│   ├── helper.js\n│   ├── index.js\n│   └── rules\n│       └── newline.js\n├── package-lock.json\n├── package.json\n└── tests\n    └── newline.test.js</code></pre>\n\n<h2 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h2><h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>比较核心的字段：<br>main: ./lib/index.js，对应commonjs引入方式的程序入口文件<br>exports: ./lib/index.js，默认导出的文件<br>scripts.build: 打包出较小的文件目录结构<br>scripts.test: 单元测试，包括了代码覆盖率<br>peerDependencies: 限制了 eslint 版本  </p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;eslint-plugin-import-curly&quot;,\n  &quot;version&quot;: &quot;1.0.1&quot;,\n  &quot;description&quot;: &quot;import curly&quot;,\n  &quot;keywords&quot;: [\n    &quot;eslint&quot;,\n    &quot;eslintplugin&quot;,\n    &quot;eslint-plugin&quot;\n  ],\n  &quot;main&quot;: &quot;.&#x2F;lib&#x2F;index.js&quot;,\n  &quot;exports&quot;: &quot;.&#x2F;lib&#x2F;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;build&quot;: &quot;node .&#x2F;build.js&quot;,\n    &quot;test&quot;: &quot;jest --coverage&quot;,\n    &quot;fix&quot;: &quot;eslint lib build.js --fix&quot;\n  &#125;,\n  &quot;devDependencies&quot;: &#123;\n    &quot;@typescript-eslint&#x2F;parser&quot;: &quot;^6.18.1&quot;,\n    &quot;eslint&quot;: &quot;^8.19.0&quot;,\n    &quot;eslint-doc-generator&quot;: &quot;^1.0.0&quot;,\n    &quot;eslint-plugin-eslint-plugin&quot;: &quot;^5.0.0&quot;,\n    &quot;eslint-plugin-jest&quot;: &quot;^27.6.2&quot;,\n    &quot;fs-extra&quot;: &quot;^11.2.0&quot;,\n    &quot;jest&quot;: &quot;^29.7.0&quot;,\n    &quot;typescript&quot;: &quot;^5.3.3&quot;\n  &#125;,\n  &quot;engines&quot;: &#123;\n    &quot;node&quot;: &quot;^14.17.0 || ^16.0.0 || &gt;&#x3D; 18.0.0&quot;\n  &#125;,\n  &quot;peerDependencies&quot;: &#123;\n    &quot;eslint&quot;: &quot;&gt;&#x3D;7&quot;\n  &#125;,\n  &quot;license&quot;: &quot;ISC&quot;\n&#125;</code></pre>\n\n<h3 id=\"build-js\"><a href=\"#build-js\" class=\"headerlink\" title=\"build.js\"></a>build.js</h3><p>先看看如何打包，思路很简单，核心思路，拷贝 package.json README.md 和 lib 目录，package.json 去掉 devDependencies 中的所有依赖即可，<br>然后把这些文件放入到 build 中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#39;use strict&#39;\n\nconst fs &#x3D; require(&#39;fs&#39;)\nconst fse &#x3D; require(&#39;fs-extra&#39;)\nconst &#123; join &#125; &#x3D; require(&#39;path&#39;)\n\nconst buildDir &#x3D; join(__dirname, &#39;build&#39;)\n\nif (fs.existsSync(buildDir)) &#123;\n  fs.rmdirSync(buildDir, &#123;recursive: true&#125;)\n&#125;\nfs.mkdirSync(buildDir)\n\nconst packageJSON &#x3D; JSON.parse(fs.readFileSync(&#39;.&#x2F;package.json&#39;, &#39;utf8&#39;))\npackageJSON.devDependencies &#x3D; &#123;&#125;\n\nfse.copySync(&#39;.&#x2F;lib&#39;, join(buildDir, &#39;lib&#39;))\nfs.writeFileSync(join(buildDir, &#39;package.json&#39;), JSON.stringify(packageJSON, undefined, 2), &#39;utf8&#39;)\nfs.copyFileSync(&#39;.&#x2F;README.md&#39;, join(buildDir, &#39;README.md&#39;))\n</code></pre>\n\n<h3 id=\"lib-index-js\"><a href=\"#lib-index-js\" class=\"headerlink\" title=\"lib/index.js\"></a>lib/index.js</h3><p>正文开始，现在来看看 index.js 写了什么。</p>\n<p>这文件也很简单，导入了一个包，然后导出了一个 <code>rules</code>， <code>rules</code> 里面包含的这是规则名称，即 <code>newline</code>。</p>\n<p>文档参考 <a href=\"https://eslint.org/docs/latest/extend/plugins\">Eslint plugin</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;use strict&quot;;\n\nconst newline &#x3D; require(&#39;.&#x2F;rules&#x2F;newline&#39;)\n\nmodule.exports.rules &#x3D; &#123;\n  newline,\n&#125;</code></pre>\n\n<h3 id=\"lib-rules-newline-js\"><a href=\"#lib-rules-newline-js\" class=\"headerlink\" title=\"lib/rules/newline.js\"></a>lib/rules/newline.js</h3><p>现在来看看规则是如何实现的。</p>\n<p>文档参考 <a href=\"https://eslint.org/docs/latest/extend/custom-rules\">Custom rules</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module.exports &#x3D; &#123;\n  meta: &#123;\n    &#x2F;&#x2F; 该规则主要关注空格、分号、逗号和括号，程序的所有部分决定代码的外观而不是代码的执行方式。这些规则适用于 AST 中未指定的部分代码。\n    type: &#39;layout&#39;,\n    &#x2F;&#x2F; whitespace: 可以修复代码中的空白字符问题，例如缩进不一致、换行不规范、空格过多或过少等。\n    fixable: &#39;whitespace&#39;,\n    &#x2F;&#x2F; 传入参数的规则校验\n    schema: [\n      &#123;\n        type: &#39;object&#39;,\n        properties: &#123;\n          count: &#123;\n            type: &#39;number&#39;,\n          &#125;,\n        &#125;,\n        additionalProperties: false,\n      &#125;,\n    ],\n    &#x2F;&#x2F; 规则文档\n    docs: &#123;\n      url: &#39;xxxxx&#39;\n    &#125;,\n    &#x2F;&#x2F; key: reportId， value: 错误消息提示\n    messages: &#123;\n      &#39;import-curly-newline&#39;: &#39;Run autofix to import curly newline!&#39;,\n    &#125;,\n  &#125;,\n  &#x2F;&#x2F; 返回一个对象，其中包含 ESLint 在遍历 JavaScript 代码的抽象语法树（ESTree 定义的 AST）时调用到 “visit” 节点的方法\n  &#x2F;&#x2F; AST 结构可以在网站 https:&#x2F;&#x2F;astexplorer.net&#x2F; 上查看\n  create: (context) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 初始化默认值，超过了三个属性则换行\n    const option &#x3D; getDefaultValues(&#123; ...context.options[0] &#125;, &#123; count: 3 &#125;)\n\n    return &#123;\n      &#x2F;&#x2F; 遍历 import 语句的回调方法，node 则为当前 import 节点\n      ImportDeclaration: node &#x3D;&gt; &#123;\n        &#x2F;&#x2F; 保留花括号中的属性，去掉 default 的导入： import A, &#123;B, C&#125; from &#39;xxx&#39;，即去掉 A\n        const importSpecifiers &#x3D; node.specifiers.filter(v &#x3D;&gt; v.type &#x3D;&#x3D;&#x3D; &#39;ImportSpecifier&#39;)\n        if (!(importSpecifiers.length &amp;&amp; option.count)) &#123;\n          return\n        &#125;\n        if (importSpecifiers.length &lt; option.count) &#123;\n          return\n        &#125;\n        &#x2F;&#x2F; 判断和处理代码\n        handleFailedImport(context, node, importSpecifiers, &#39;import-curly-newline&#39;)\n      &#125;,\n    &#125;\n  &#125;\n&#125;\n\nfunction handleFailedImport(context, node, importSpecifiers, messageId) &#123;\n  const sourceCode &#x3D; context.getSourceCode()\n\n  const &#123;\n    &#x2F;&#x2F; 左花括号节点\n    bracesLeft,\n    &#x2F;&#x2F; 后花括号节点\n    bracesRight,\n    &#x2F;&#x2F; 最后一个属性是否是逗号结尾\n    isHavaLastComma\n  &#125; &#x3D; getBracesTokens(sourceCode.getTokens(node))\n\n  if (\n    bracesLeft &amp;&amp;\n    bracesRight &amp;&amp;\n    importSpecifiers &amp;&amp;\n    &#x2F;&#x2F; 判断是否是每个属性都在单独的一行\n    isImportNewline(importSpecifiers, bracesLeft.loc.start.line, bracesRight.loc.start.line)\n  ) &#123;\n    &#x2F;&#x2F; 报告错误\n    reportFailedImport(\n      context,\n      [bracesLeft.range[0], bracesRight.range[1]],\n      messageId,\n      &#x2F;&#x2F; 修复后的代码\n      fixFailedImportCurlyNewline(sourceCode.getText(node), isHavaLastComma)\n    )\n  &#125;\n&#125;\n\n&#x2F;&#x2F; true 表示代码不满足规则\nfunction isImportNewline(nodes, bracesLeftLine, bracesRightLine) &#123;\n  &#x2F;&#x2F; 初始化上一行为左花括号的行数\n  let lastNodeLine &#x3D; bracesLeftLine\n  for (const node of nodes) &#123;\n    &#x2F;&#x2F; 判断同一个节点是否在同一行 A as AA, A \\n as AA\n    if (node.loc.start.line !&#x3D;&#x3D; node.loc.end.line) &#123;\n      return true\n    &#125;\n    &#x2F;&#x2F; 判断上一个节点和该节点是否在同一行\n    if (lastNodeLine &#x3D;&#x3D;&#x3D; node.loc.start.line) &#123;\n      return true\n    &#125; else &#123;\n      lastNodeLine &#x3D; node.loc.start.line\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 判断最后一个节点是否和右花括号在 同一行\n  return nodes[nodes.length - 1].loc.start.line &#x3D;&#x3D;&#x3D; bracesRightLine\n&#125;\n\n&#x2F;&#x2F; 修复代码\nfunction fixFailedImportCurlyNewline(codeStr, isHavaLastComma) &#123;\n  &#x2F;&#x2F; 判断结束符\n  const lineOff &#x3D; &#x2F;\\r\\n&#x2F;.test(codeStr) ? &#39;\\r\\n&#39; : (&#x2F;\\r&#x2F;.test(codeStr) ? &#39;\\r&#39; : &#39;\\n&#39;)\n\n  &#x2F;&#x2F; 思路是把花括号中的内容，先去掉换行符，然后按照逗号分成数组，过滤掉空行，最后在每个节点前加两个空格\n  &#x2F;&#x2F; TODO 这里固定了加两个空格，应该做兼容，暂时没有想到有什么好的方案\n  const params &#x3D; codeStr.substring(codeStr.indexOf(&#39;&#123;&#39;) + 1, codeStr.indexOf(&#39;&#125;&#39;))\n    .replace(&#x2F;\\n&#x2F;g, &#39;&#39;)\n    .replace(&#x2F;\\r&#x2F;g, &#39;&#39;)\n    .split(&#39;,&#39;)\n    .filter(v &#x3D;&gt; v.trim())\n    .map(v &#x3D;&gt; &#96;  $&#123;v.trim()&#125;&#96;)\n\n  &#x2F;&#x2F; 如果最后有逗号，添加一个空节点\n  if (isHavaLastComma) &#123;\n    params.push(&#39;&#39;)\n  &#125;\n\n  &#x2F;&#x2F; 拼接修复后的代码即可\n  return &#96;&#123;$&#123;lineOff&#125;$&#123;params.join(&#96;,$&#123;lineOff&#125;&#96;)&#125;$&#123;isHavaLastComma ? &#39;&#125;&#39; : &#96;$&#123;lineOff&#125;&#125;&#96;&#125;&#96;\n&#125;</code></pre>\n\n<h3 id=\"lib-helper-js\"><a href=\"#lib-helper-js\" class=\"headerlink\" title=\"lib/helper.js\"></a>lib/helper.js</h3><p>相对通用的方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 获取左右花括号的位置，判断最后是否有逗号\nfunction getBracesTokens(tokens) &#123;\n  let bracesLeft\n  let bracesRight\n  let isHavaLastComma &#x3D; false\n  tokens.forEach((v, i) &#x3D;&gt; &#123;\n    if (v.type &#x3D;&#x3D;&#x3D; &#39;Punctuator&#39; &amp;&amp; v.value &#x3D;&#x3D;&#x3D; &#39;&#123;&#39;) &#123;\n      bracesLeft &#x3D; v\n    &#125;\n    if (v.type &#x3D;&#x3D;&#x3D; &#39;Punctuator&#39; &amp;&amp; v.value &#x3D;&#x3D;&#x3D; &#39;&#125;&#39;) &#123;\n      if (i &gt; 0 &amp;&amp; tokens[i - 1].value &#x3D;&#x3D;&#x3D; &#39;,&#39;) &#123;\n        isHavaLastComma &#x3D; true\n      &#125;\n      bracesRight &#x3D; v\n    &#125;\n  &#125;)\n  return &#123;\n    bracesLeft,\n    bracesRight,\n    isHavaLastComma,\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 报告错误代码，并且提示修复\nfunction reportFailedImport(context, ranges, messageId, fixedCode) &#123;\n  const sourceCode &#x3D; context.getSourceCode()\n\n  context.report(&#123;\n    messageId,\n    loc: &#123;\n      start: sourceCode.getLocFromIndex(ranges[0]),\n      end: sourceCode.getLocFromIndex(ranges[1])\n    &#125;,\n    fix: fixer &#x3D;&gt; fixer.replaceTextRange(ranges, fixedCode)\n  &#125;)\n&#125;\n\n&#x2F;&#x2F; 生成默认参数\nfunction getDefaultValues(options, defaultValues) &#123;\n  for (const key of Object.keys(defaultValues)) &#123;\n    if (options[key] &#x3D;&#x3D;&#x3D; undefined) &#123;\n      options[key] &#x3D; defaultValues[key]\n    &#125;\n  &#125;\n  return options\n&#125;\n</code></pre>\n\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>先安装该插件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install eslint-plugin-import-curly --save-dev</code></pre>\n\n<p>在 <code>.eslintrc</code> 文件中配置该插件，去掉 <code>eslint-plugin-</code></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;plugins&quot;: [&quot;import-curly&quot;]\n&#125;</code></pre>\n\n<h3 id=\"规则：import-curly-newline\"><a href=\"#规则：import-curly-newline\" class=\"headerlink\" title=\"规则：import-curly/newline\"></a>规则：import-curly/newline</h3><p>用于格式化换行操作，import 花括号中属性默认超过了 3 个，则每个属性都换一行。</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count</td>\n<td>number</td>\n<td>3</td>\n<td>如果花括号中的属性超过了 3 个，则会触发该规则</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;newline&quot;: &quot;error&quot;\n  &#125;\n&#125;</code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;newline&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;count&quot;: 4\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n\n<p>case：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; invalid\nimport &#123;\n  A as AA,B, C&#125; from &#39;C&#39;\n\n&#x2F;&#x2F; ||\n&#x2F;&#x2F; \\&#x2F;\n\n&#x2F;&#x2F; valid\nimport &#123;\n  A as AA,\n  B,\n  C\n&#125; from &#39;C&#39;</code></pre>\n\n<h3 id=\"规则：import-curly-sort-params\"><a href=\"#规则：import-curly-sort-params\" class=\"headerlink\" title=\"规则：import-curly/sort-params\"></a>规则：import-curly/sort-params</h3><p>用于 import 花括号中的属性进行排序</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>类型</th>\n<th>默认值</th>\n<th>可选值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>typeLocation</td>\n<td>string</td>\n<td>ignore</td>\n<td>ignore,first,last</td>\n<td>ignore: 忽略 ts 中 type 的位置，first: type 的位置在最前方, last: type 的位置在最后放</td>\n</tr>\n<tr>\n<td>orderBy</td>\n<td>string</td>\n<td>alphabeticalOrder</td>\n<td>alphabeticalOrder,letterNumber</td>\n<td>alphabeticalOrder: 按照字母排序， letterNumber: 按照字数排序。如果按照字数排序，相同字数的会按照字母排序</td>\n</tr>\n<tr>\n<td>sortBy</td>\n<td>string</td>\n<td>aec</td>\n<td>aec,desc</td>\n<td>aec: 增序, desc: 降序</td>\n</tr>\n<tr>\n<td>ignoreCase</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n<td>true: 忽略大小写，false: 不忽略大小写</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;sort-params&quot;: &quot;error&quot;\n  &#125;\n&#125;</code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;typeLocation&quot;: &quot;first&quot;,\n        &quot;orderBy&quot;: &quot;letterNumber&quot;,\n        &quot;sortBy&quot;: &quot;desc&quot;,\n        &quot;ignoreCase&quot;: false\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"默认规则\"><a href=\"#默认规则\" class=\"headerlink\" title=\"默认规则\"></a>默认规则</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;sort-params&quot;: &quot;error&quot;,\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;typeLocation&quot;: &quot;ignore&quot;,\n        &quot;orderBy&quot;: &quot;alphabeticalOrder&quot;,\n        &quot;sortBy&quot;: &quot;aec&quot;,\n        &quot;ignoreCase&quot;: true\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n\n<p>有效的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import type &#123;a,b,c,d&#125; from &#39;a&#39;\nimport &#123;A,B,C,D&#125; from &#39;a&#39;\nimport type &#123;a,B,c,D&#125; from &#39;a&#39;\nimport &#123;A,b,c,D&#125; from &#39;a&#39;\nimport &#123;type a,b,type c,d&#125; from &#39;a&#39;\nimport &#123;a,type b,c,default as d&#125; from &#39;a&#39;</code></pre>\n\n<p>错误的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; invalid\nimport &#123;type A,type c,d,B&#125; from &#39;a&#39;\n&#x2F;&#x2F; ||\n&#x2F;&#x2F; \\&#x2F;\n&#x2F;&#x2F; valid\nimport &#123;type A,B,type c,d&#125; from &#39;a&#39;\n\n\n&#x2F;&#x2F; invalid, ignore type, compare with &#39;default&#39;\nimport &#123;c,default as d,type b,a&#125; from &#39;a&#39;\n&#x2F;&#x2F; ||\n&#x2F;&#x2F; \\&#x2F;\n&#x2F;&#x2F; valid\nimport &#123;a,type b,c,default as d&#125; from &#39;a&#39;</code></pre>\n\n<h4 id=\"type-在最前方\"><a href=\"#type-在最前方\" class=\"headerlink\" title=\"type 在最前方\"></a>type 在最前方</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;typeLocation&quot;: &quot;first&quot;\n      &#125;\n    ],\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;typeLocation&quot;: &quot;ignore&quot;,\n        &quot;orderBy&quot;: &quot;alphabeticalOrder&quot;,\n        &quot;sortBy&quot;: &quot;aec&quot;,\n        &quot;ignoreCase&quot;: true\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n\n<p>有效的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; type first\nimport &#123;type B,type c,A, d&#125; from &#39;a&#39;\nimport &#123;type b,type d,a,c&#125; from &#39;a&#39;</code></pre>\n\n<p>错误的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; invalid, compare with &#39;default&#39;\nimport &#123;c,a,default as d,type b&#125; from &#39;a&#39;\n&#x2F;&#x2F; ||\n&#x2F;&#x2F; \\&#x2F;\n&#x2F;&#x2F; valid\nimport &#123;type b,a,c,default as d&#125; from &#39;a&#39;</code></pre>\n\n<h4 id=\"按照字数排序\"><a href=\"#按照字数排序\" class=\"headerlink\" title=\"按照字数排序\"></a>按照字数排序</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;orderBy&quot;: &quot;letterNumber&quot;\n      &#125;\n    ],\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;typeLocation&quot;: &quot;ignore&quot;,\n        &quot;orderBy&quot;: &quot;letterNumber&quot;,\n        &quot;sortBy&quot;: &quot;aec&quot;,\n        &quot;ignoreCase&quot;: true\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n\n<p>有效的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &#123;a, ba, bb, ccc&#125; from &#39;a&#39;\nimport &#123;a, ba, bb, bbb&#125; from &#39;a&#39;</code></pre>\n\n<p>错误的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; invalid bb ba letterNumber is the same, should order by alpha\nimport &#123;a, bb, ba&#125; from &#39;a&#39;\n&#x2F;&#x2F; ||\n&#x2F;&#x2F; \\&#x2F;\n&#x2F;&#x2F; valid\nimport &#123;a, ba, bb&#125; from &#39;a&#39;</code></pre>\n\n<h4 id=\"按照字母降序排序\"><a href=\"#按照字母降序排序\" class=\"headerlink\" title=\"按照字母降序排序\"></a>按照字母降序排序</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;sortBy&quot;: &quot;desc&quot;\n      &#125;\n    ],\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;typeLocation&quot;: &quot;ignore&quot;,\n        &quot;orderBy&quot;: &quot;alphabeticalOrder&quot;,\n        &quot;sortBy&quot;: &quot;desc&quot;,\n        &quot;ignoreCase&quot;: true\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n\n<p>有效的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &#123;d, c, b, a&#125; from &#39;a&#39;</code></pre>\n\n<h4 id=\"按照字数降序排序\"><a href=\"#按照字数降序排序\" class=\"headerlink\" title=\"按照字数降序排序\"></a>按照字数降序排序</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;orderBy&quot;: &quot;letterNumber&quot;,\n        &quot;sortBy&quot;: &quot;desc&quot;\n      &#125;\n    ],\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;typeLocation&quot;: &quot;ignore&quot;,\n        &quot;orderBy&quot;: &quot;letterNumber&quot;,\n        &quot;sortBy&quot;: &quot;desc&quot;,\n        &quot;ignoreCase&quot;: true\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n\n<p>有效的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &#123;aaa, cc, aa, d&#125; from &#39;a&#39;</code></pre>\n\n<h4 id=\"不忽略大小写\"><a href=\"#不忽略大小写\" class=\"headerlink\" title=\"不忽略大小写\"></a>不忽略大小写</h4><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;rules&quot;: &#123;\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;ignoreCase&quot;: false\n      &#125;\n    ],\n    &quot;import-curly&#x2F;sort-params&quot;: [\n      &quot;error&quot;,\n      &#123;\n        &quot;typeLocation&quot;: &quot;ignore&quot;,\n        &quot;orderBy&quot;: &quot;alphabeticalOrder&quot;,\n        &quot;sortBy&quot;: &quot;aec&quot;,\n        &quot;ignoreCase&quot;: false\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n\n<p>有效的样例</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">import &#123;A, B, C, a, b, c&#125; from &#39;a&#39;\nimport &#123;A, B, C, a, b, c, default as d&#125; from &#39;a&#39;</code></pre>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>如果大佬有什么现有的更好的方案，欢迎讨论<br>附上项目地址： <a href=\"https://github.com/littleboyfury/eslint-plugin-import-curly\">eslint-plugin-import-curly</a></p>\n","feature":true,"text":"Eslint 自定义插件需求来源在整理 import 的时候，发现 &#123;&#125; 中属性换行调整不到想要的结果。 例如: &#x2F;&#x2F; 编写的代码 import &#123;A, B, C&#125; from &#39;xxx&#39; &#x2F;&#...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"前端","slug":"前端","count":4,"path":"api/categories/前端.json"}],"tags":[{"name":"ESLINT","slug":"ESLINT","count":1,"path":"api/tags/ESLINT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Eslint-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">Eslint 自定义插件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">需求来源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">代码说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#package-json\"><span class=\"toc-text\">package.json</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#build-js\"><span class=\"toc-text\">build.js</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lib-index-js\"><span class=\"toc-text\">lib&#x2F;index.js</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lib-rules-newline-js\"><span class=\"toc-text\">lib&#x2F;rules&#x2F;newline.js</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lib-helper-js\"><span class=\"toc-text\">lib&#x2F;helper.js</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">使用方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E5%88%99%EF%BC%9Aimport-curly-newline\"><span class=\"toc-text\">规则：import-curly&#x2F;newline</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E5%88%99%EF%BC%9Aimport-curly-sort-params\"><span class=\"toc-text\">规则：import-curly&#x2F;sort-params</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E8%A7%84%E5%88%99\"><span class=\"toc-text\">默认规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#type-%E5%9C%A8%E6%9C%80%E5%89%8D%E6%96%B9\"><span class=\"toc-text\">type 在最前方</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%89%E7%85%A7%E5%AD%97%E6%95%B0%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">按照字数排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%89%E7%85%A7%E5%AD%97%E6%AF%8D%E9%99%8D%E5%BA%8F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">按照字母降序排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%89%E7%85%A7%E5%AD%97%E6%95%B0%E9%99%8D%E5%BA%8F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">按照字数降序排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99\"><span class=\"toc-text\">不忽略大小写</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"electron 常见问题","uid":"98a5ddadc5f84e73bebd47e1058c0877","slug":"electron","date":"2022-10-25T16:00:00.000Z","updated":"2023-07-10T08:34:58.060Z","comments":true,"path":"api/articles/electron.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1666676246515.png","text":"Electron 常见问题Electron 使用 chokidar 导致编译后白屏的问题 问题出现场景： 配置的是 contextIsolation 为 false ，可以在 renderer 进程中去使用 node 的包，使用 chokidar 去监听文件变化，windows ...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"前端","slug":"前端","count":4,"path":"api/categories/前端.json"}],"tags":[{"name":"ELECTRON","slug":"ELECTRON","count":2,"path":"api/tags/ELECTRON.json"},{"name":"WEBPACK","slug":"WEBPACK","count":2,"path":"api/tags/WEBPACK.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"feature":true}}