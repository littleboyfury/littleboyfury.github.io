{"title":"electron 常见问题","uid":"98a5ddadc5f84e73bebd47e1058c0877","slug":"electron","date":"2022-10-25T16:00:00.000Z","updated":"2023-07-10T08:34:58.060Z","comments":true,"path":"api/articles/electron.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1666676246515.png","content":"<h1 id=\"Electron-常见问题\"><a href=\"#Electron-常见问题\" class=\"headerlink\" title=\"Electron 常见问题\"></a>Electron 常见问题</h1><h2 id=\"Electron-使用-chokidar-导致编译后白屏的问题\"><a href=\"#Electron-使用-chokidar-导致编译后白屏的问题\" class=\"headerlink\" title=\"Electron 使用 chokidar 导致编译后白屏的问题\"></a>Electron 使用 chokidar 导致编译后白屏的问题</h2><ul>\n<li>问题出现场景：</li>\n</ul>\n<p>配置的是 contextIsolation 为 false ，可以在 renderer 进程中去使用 node 的包，使用 chokidar 去监听文件变化，windows 上面打包可以正常运行，mac 上打包出现了白屏</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const mainWindow &#x3D; new CrateMainWindow(&#123;\n  width: 1200,\n  minWidth: 1200,\n  height: 800,\n  minHeight: 800,\n  useContentSize: true,\n  show: false,\n  frame: false,\n  titleBarStyle: platform().includes(&#39;win32&#39;) ? &#39;default&#39; : &#39;hidden&#39;,\n  webPreferences: &#123;\n    experimentalFeatures: true,\n    contextIsolation: false,\n    nodeIntegration: true,\n    webSecurity: false,\n    devTools: true,\n    scrollBounce: process.platform &#x3D;&#x3D;&#x3D; &#39;darwin&#39;\n  &#125;\n&#125;)</code></pre>\n\n<ul>\n<li>解决办法</li>\n</ul>\n<p>打包是通过 webpack5 进行打包，由于是在浏览器端直接进行调用 node 的包，所有需要再 main 和 renderer 的配置中加入以下配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; webpack.renderer.js\nmodule.exports &#x3D; &#123;\n  externals: [\n    &#39;fsevents&#39;\n  ]\n&#125;\n\n&#x2F;&#x2F; webpack.main.js\nmodule.exports &#x3D; &#123;\n  externals: [\n    &#39;fsevents&#39;,\n    &#x2F;&#x2F; dependencies 为 package.json 中 dependencies 中的包名\n    ...Object.keys(dependencies || &#123;&#125;)\n  ]\n&#125;</code></pre>\n\n<p>最后重新 build 一下就可以正常运行了</p>\n<h2 id=\"electron-builder-打包报错\"><a href=\"#electron-builder-打包报错\" class=\"headerlink\" title=\"electron-builder 打包报错\"></a>electron-builder 打包报错</h2><ul>\n<li>问题描述</li>\n</ul>\n<p>electron 打包的时候报错</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">**** build: npm WARN config global &#96;--global&#96;, &#96;--local&#96; are deprecated. Use &#96;--location&#x3D;global&#96; instead.\n**** build:   • electron-builder  version&#x3D;23.6.0 os&#x3D;10.0.19045\n**** build:   • artifacts will be published if draft release exists  reason&#x3D;CI detected\n**** build:   • packaging       platform&#x3D;win32 arch&#x3D;x64 electron&#x3D;19.0.8 appOutDir&#x3D;build\\win-unpacked\n**** build:   ⨯ Get &quot;https:&#x2F;&#x2F;npmmirror.com&#x2F;mirrors&#x2F;electron&#x2F;19.0.8&#x2F;electron-v19.0.8-win32-x64.zip&quot;: proxyconnect tcp: dial tcp :0: connectex: The requested address is not valid in its context.\n**** build: github.com&#x2F;develar&#x2F;app-builder&#x2F;pkg&#x2F;download.(*Downloader).follow.func1\n**** build: \t&#x2F;Volumes&#x2F;data&#x2F;Documents&#x2F;app-builder&#x2F;pkg&#x2F;download&#x2F;downloader.go:206\n**** build: github.com&#x2F;develar&#x2F;app-builder&#x2F;pkg&#x2F;download.(*Downloader).follow\n**** build: \t&#x2F;Volumes&#x2F;data&#x2F;Documents&#x2F;app-builder&#x2F;pkg&#x2F;download&#x2F;downloader.go:234\n**** build: github.com&#x2F;develar&#x2F;app-builder&#x2F;pkg&#x2F;download.(*Downloader).DownloadNoRetry\n**** build: \t&#x2F;Volumes&#x2F;data&#x2F;Documents&#x2F;app-builder&#x2F;pkg&#x2F;download&#x2F;downloader.go:128\n**** build: github.com&#x2F;develar&#x2F;app-builder&#x2F;pkg&#x2F;download.(*Downloader).Download\n**** build: \t&#x2F;Volumes&#x2F;data&#x2F;Documents&#x2F;app-builder&#x2F;pkg&#x2F;download&#x2F;downloader.go:112\n**** build: github.com&#x2F;develar&#x2F;app-builder&#x2F;pkg&#x2F;electron.(*ElectronDownloader).doDownload\n**** build: \t&#x2F;Volumes&#x2F;data&#x2F;Documents&#x2F;app-builder&#x2F;pkg&#x2F;electron&#x2F;electronDownloader.go:192\n**** build: github.com&#x2F;develar&#x2F;app-builder&#x2F;pkg&#x2F;electron.(*ElectronDownloader).Download\n**** build: \t&#x2F;Volumes&#x2F;data&#x2F;Documents&#x2F;app-builder&#x2F;pkg&#x2F;electron&#x2F;electronDownloader.go:177\n**** build: github.com&#x2F;develar&#x2F;app-builder&#x2F;pkg&#x2F;electron.downloadElectron.func1.1\n**** build: \t&#x2F;Volumes&#x2F;data&#x2F;Documents&#x2F;app-builder&#x2F;pkg&#x2F;electron&#x2F;electronDownloader.go:73\n**** build: github.com&#x2F;develar&#x2F;app-builder&#x2F;pkg&#x2F;util.MapAsyncConcurrency.func2\n**** build: \t&#x2F;Volumes&#x2F;data&#x2F;Documents&#x2F;app-builder&#x2F;pkg&#x2F;util&#x2F;async.go:68\n**** build: runtime.goexit\n**** build: \t&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;go&#x2F;1.17&#x2F;libexec&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:1581  \n**** build: C:\\Users\\haoxing\\gitlab-runner\\builds\\yzC86XrJ\\0\\yang.yang\\haoxing-trade-manage\\node_modules\\.pnpm\\builder-util@23.6.0\\node_modules\\builder-util\\src\\util.ts:250\n**** build:       reject(new ExecError(command, code, out, errorOut))\n**** build:              ^\n**** build: Error: C:\\Users\\haoxing\\gitlab-runner\\builds\\yzC86XrJ\\0\\yang.yang\\haoxing-trade-manage\\node_modules\\.pnpm\\app-builder-bin@4.0.0\\node_modules\\app-builder-bin\\win\\x64\\app-builder.exe process failed ERR_ELECTRON_BUILDER_CANNOT_EXECUTE\n**** build: Exit code:\n**** build: 1\n**** build:     at ChildProcess.&lt;anonymous&gt; (C:\\Users\\haoxing\\gitlab-runner\\builds\\yzC86XrJ\\0\\yang.yang\\haoxing-trade-manage\\node_modules\\.pnpm\\builder-util@23.6.0\\node_modules\\builder-util\\src\\util.ts:250:14)\n**** build:     at Object.onceWrapper (node:events:642:26)\n**** build:     at ChildProcess.emit (node:events:527:28)\n**** build:     at ChildProcess.cp.emit (C:\\Users\\haoxing\\gitlab-runner\\builds\\yzC86XrJ\\0\\yang.yang\\haoxing-trade-manage\\node_modules\\.pnpm\\cross-spawn@7.0.3\\node_modules\\cross-spawn\\lib\\enoent.js:34:29)\n**** build:     at maybeClose (node:internal&#x2F;child_process:1092:16)\n**** build:     at Process.ChildProcess._handle.onexit (node:internal&#x2F;child_process:302:5)\n**** build: Failed\nundefined\nC:\\Users\\haoxing\\gitlab-runner\\builds\\yzC86XrJ\\0\\yang.yang\\haoxing-trade-manage\\packages\\haoxing:\n ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  @hx&#x2F;haoxing@0.0.1 build: &#96;rimraf dist &amp;&amp; rimraf build &amp;&amp; cross-env NODE_ENV&#x3D;production vue-tsc --noEmit &amp;&amp; vite build&#96;\nExit status 1\n ELIFECYCLE  Command failed with exit code 1.</code></pre>\n\n<ul>\n<li>解决办法</li>\n</ul>\n<p><a href=\"https://npmmirror.com/mirrors/electron/19.0.8/electron-v19.0.8-win32-x64.zip\">手动下载文件</a></p>\n<p>放入 <code>AppData\\Local\\electron\\Cache</code> 中</p>\n","feature":true,"text":"Electron 常见问题Electron 使用 chokidar 导致编译后白屏的问题 问题出现场景： 配置的是 contextIsolation 为 false ，可以在 renderer 进程中去使用 node 的包，使用 chokidar 去监听文件变化，windows ...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"}],"tags":[{"name":"ELECTRON","slug":"ELECTRON","count":2,"path":"api/tags/ELECTRON.json"},{"name":"WEBPACK","slug":"WEBPACK","count":2,"path":"api/tags/WEBPACK.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Electron-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Electron 常见问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Electron-%E4%BD%BF%E7%94%A8-chokidar-%E5%AF%BC%E8%87%B4%E7%BC%96%E8%AF%91%E5%90%8E%E7%99%BD%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Electron 使用 chokidar 导致编译后白屏的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#electron-builder-%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99\"><span class=\"toc-text\">electron-builder 打包报错</span></a></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"webpack 自定义 loader","uid":"1f856bdf240a03a57edc41573ba4f1c6","slug":"webpack","date":"2022-10-25T16:00:00.000Z","updated":"2023-07-10T08:34:58.060Z","comments":true,"path":"api/articles/webpack.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1666682400879.png","text":"webpack 自定义 loader需求来源需要在客户端中写入日志，并且需要知道报错日志的原文件路径和行号，不采用 sentry 的方式（需要额外部署） 思路想法是在 logger 的最后两个参数中加入原始文件名和行号，所以这一步在 webpack 加载文件的时候就需要去解析文件...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"}],"tags":[{"name":"VUE","slug":"VUE","count":2,"path":"api/tags/VUE.json"},{"name":"ELECTRON","slug":"ELECTRON","count":2,"path":"api/tags/ELECTRON.json"},{"name":"WEBPACK","slug":"WEBPACK","count":2,"path":"api/tags/WEBPACK.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"feature":true},"next_post":{"title":"Electron 使用 cryptoJs 加密","uid":"39b4d57bd8b6b84b4666262778a8be78","slug":"cryptoJs","date":"2022-10-25T16:00:00.000Z","updated":"2023-07-10T08:34:58.059Z","comments":true,"path":"api/articles/cryptoJs.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","text":"Electron 使用 cryptoJs 进行加密背景由于 electron 开启了浏览器端可以直接使用 node 的包，所以导致了对文件加密时出现了多种类型的文件描述，node fs 读取的 Buffer 文件，浏览器的 Blob 文件 key 和 iv 构建const key...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"CRYPTO_JS","slug":"CRYPTO-JS","count":1,"path":"api/tags/CRYPTO-JS.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"feature":true}}