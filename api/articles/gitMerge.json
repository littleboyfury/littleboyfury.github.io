{"title":"git merge 原理","uid":"bc3e26c008b79bc9d58c7c60987d0cdd","slug":"gitMerge","date":"2022-05-18T16:00:00.000Z","updated":"2022-09-28T07:19:23.109Z","comments":true,"path":"api/articles/gitMerge.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652945378551.png","content":"<h1 id=\"GIT-合并基本原理\"><a href=\"#GIT-合并基本原理\" class=\"headerlink\" title=\"GIT 合并基本原理\"></a>GIT 合并基本原理</h1><h2 id=\"二路合并\"><a href=\"#二路合并\" class=\"headerlink\" title=\"二路合并\"></a>二路合并</h2><p>二路合并就是逐行对比，如果行内容不同这报冲突。</p>\n<p>本地提交</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">console.log(&#39;hello world&#39;)</code></pre>\n\n<p>其他提交</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">console.log(&#39;world hello&#39;)</code></pre>\n\n<p>假设这是修改了同一个文件，进行合并时，发现这一行不一致，git 没有理由去丢弃本地提交或者其他提交，只能人为处理</p>\n<h2 id=\"三路合并\"><a href=\"#三路合并\" class=\"headerlink\" title=\"三路合并\"></a>三路合并</h2><p>三路合并就是先找一个 base，如果两个文件相对于 base 都有修改，那就会报冲突，则需要人工修改，否则，git 将相当于 base 变化来决定最终结果</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; base\nconsole.log(&#39;hello world&#39;)\n\n&#x2F;&#x2F; mine\nconsole.log(&#39;hello world&#39;)\n\n&#x2F;&#x2F; theirs\nconsole.log(&#39;world hello&#39;)</code></pre>\n\n<p>base: 代表 mine 和 theirs 的公共祖先 mine: 代表本地修改 theirs: 代表合并其他人修改</p>\n<p>当前的情况表示代码其他人有修改，但是本地没有修改，则 git 会自动把结果合并为 theirs 的代码</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">console.log(&#39;world hello&#39;)</code></pre>\n\n<p><img src=\"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652946909147.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_50/format,jpg\"></p>\n<p>如果本地文件被修改，合并的分支也有修改</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; base\nconsole.log(&#39;hello world&#39;)\n\n&#x2F;&#x2F; mine\nconsole.log(&#39;hello world 1111&#39;)\n\n&#x2F;&#x2F; theirs\nconsole.log(&#39;world hello&#39;)</code></pre>\n\n<p>git 无法合并，需要人为进行合并</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; Mine\nconsole.log(&#39;hello world 1111&#39;)\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nconsole.log(&#39;world hello&#39;)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Theirs</code></pre>\n\n<p><img src=\"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652947681491.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_50/format,jpg\"></p>\n<h3 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><p><img src=\"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652947980412.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_50/format,jpg\"></p>\n<p>1-9 表示每个修改后的 commit 以及一个唯一的 hash 值。</p>\n<p>2 开始分出了一个 dev 分支， 4 7 是 master 上的提交，3 5 8 是 dev 上的提交</p>\n<p>现在要合并 7 和 8，可以把 git 提交记录看成一个有向无环图，这样就可以找到 2 为他们的 base 节点，就可以用来对比文件是否有修改</p>\n<h3 id=\"递归三路合并原理\"><a href=\"#递归三路合并原理\" class=\"headerlink\" title=\"递归三路合并原理\"></a>递归三路合并原理</h3><p><img src=\"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652950576796.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_50/format,jpg\"></p>\n<ul>\n<li>0: 的位置创建了 a.js</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">console.log(&#39;a&#39;)</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git add .\ngit commit -m &quot;0&quot;</code></pre>\n\n<ul>\n<li>1: 的位置从 master 上创建了一个新的分支 test1，并且创建了一个提交，没有修改 a.js</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout -b test1\n# 用于创建提交\ntouch test1.js\ngit add .\ngit commit -m &quot;1&quot;</code></pre>\n\n<ul>\n<li>2: 的位置在 master 中创建了一个提交，没有修改 a.js</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout master\n# 用于创建提交\ngit touch test2.js\ngit add .\ngit commit -m &quot;2&quot;</code></pre>\n\n<ul>\n<li>3: 的位置在 test1 中创建了一个提交，没有修改 a.js</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout test1\ngit touch test3.js\ngit add .\ngit commit -m &quot;3&quot;</code></pre>\n\n<ul>\n<li>4: 的位置在 master 中修改了 a.js，并且创建了一个提交</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;b&#39;)</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout master\ngit add .\ngit commit -m &quot;4&quot;</code></pre>\n\n<ul>\n<li>5: 的位置从 master 上创建了一个新的分支 test2，并且合并了 test1 的代码，即合并 4 和 3 的代码，从前面可知，4 修改了 a.js 的代码，test1 分支中没有修改 a.js，他们的公共祖先是 0</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout -b test2\ngit merge test1</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 0\nconsole.log(&#39;a&#39;)\n\n&#x2F;&#x2F; 3\nconsole.log(&#39;a&#39;)\n\n&#x2F;&#x2F; 4\nconsole.log(&#39;b&#39;)</code></pre>\n\n<p>由此对比出，合并后的为 4 中的内容，因为 3 没有修改该文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;b&#39;)</code></pre>\n\n<ul>\n<li>6: 的位置切换到了 master 分支，并且合并了 test1 的代码，即合并 3 和 4 的代码，原理和 5 一致</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout master\ngit merge test1</code></pre>\n\n<ul>\n<li>7: 的位置切换到了 test2 分支，并且修改 a.js 的代码，创建了一个提交</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;c&#39;)</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout test2\ngit add .\ngit commit -m &quot;7&quot;</code></pre>\n\n<ul>\n<li>8: 的位置切换到了 master ，合并 test2 的代码，即合并6 和 7 此时，</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git checkout master\ngit merge test2</code></pre>\n\n<p>6 和 7 有两个公共的祖先，4 和 3， 这时候会递归的去找 4 和 3 的祖先，则是 0，先合并 4 和 3，生成临时的节点，假设为 x ，根据上面的结论，x 中 a.js 为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;b&#39;)</code></pre>\n\n<p>然后把 x 当作 6 和 7 的祖先，进行合并</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; x\nconsole.log(&#39;b&#39;)\n\n&#x2F;&#x2F; 6\nconsole.log(&#39;b&#39;)\n\n&#x2F;&#x2F; 7 \nconsole.log(&#39;c&#39;)</code></pre>\n\n<p>所以合并结果为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;c&#39;)</code></pre>\n","text":"GIT 合并基本原理二路合并二路合并就是逐行对比，如果行内容不同这报冲突。 本地提交 console.log(&#39;hello world&#39;) 其他提交 console.log(&#39;world hello&#39;) 假设这是修改了同一个文件，进行合并时，发现这...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"原理","slug":"原理","count":2,"path":"api/categories/原理.json"}],"tags":[{"name":"GIT","slug":"GIT","count":1,"path":"api/tags/GIT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GIT-%E5%90%88%E5%B9%B6%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">GIT 合并基本原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%B7%AF%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">二路合并</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E8%B7%AF%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">三路合并</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">简单示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E4%B8%89%E8%B7%AF%E5%90%88%E5%B9%B6%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">递归三路合并原理</span></a></li></ol></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"monorepo pnpm 打开方式","uid":"219378987043e4797346b5005bf2e4a1","slug":"monorepo","date":"2022-07-19T16:00:00.000Z","updated":"2022-09-28T07:19:23.110Z","comments":true,"path":"api/articles/monorepo.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","text":"使用 pnpm workspace 管理 monorepo 项目安装 pnpmpnpm 中文文档 什么是 monorepoMonorepo 是项目管理代码的方式之一，指的是一个大项目中包含了需要小项目或者模块，大概的样子 ├── packages | ├── pkg1 | | ├...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"feature":true},"next_post":{"title":"TypeScript 类型","uid":"df69bf2a71d2ba449a532d953647cc2a","slug":"typescriptType","date":"2022-05-17T16:00:00.000Z","updated":"2022-09-28T07:19:23.111Z","comments":true,"path":"api/articles/typescriptType.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652855718873.png","text":"TypeScript 类型基本类型js 运行时类型 number boolean string object bigint symbol undefined null ts 中的包装类型 Number Boolean String Object Symbol 复合类型JS 中的 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"TYPESCRIPT","slug":"TYPESCRIPT","count":5,"path":"api/tags/TYPESCRIPT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}}}