{"title":"ECMAScript 2017 新特性","uid":"d318e18e99918ad61da8e565bf7bdfdc","slug":"ecmascript2017","date":"2022-01-04T16:00:00.000Z","updated":"2022-09-28T07:19:23.107Z","comments":true,"path":"api/articles/ecmascript2017.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","content":"<h1 id=\"ECMAScript-2017-新特性\"><a href=\"#ECMAScript-2017-新特性\" class=\"headerlink\" title=\"ECMAScript 2017 新特性\"></a>ECMAScript 2017 新特性</h1><h2 id=\"Object-values\"><a href=\"#Object-values\" class=\"headerlink\" title=\"Object.values\"></a>Object.values</h2><p>输出对象的值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  foo: &#39;value1&#39;,\n  bar: &#39;value2&#39;,\n&#125;\n\nconsole.log(Object.values(obj))\n&#x2F;&#x2F; [ &#39;value1&#39;, &#39;value2&#39; ]</code></pre>\n\n<h2 id=\"Object-entries\"><a href=\"#Object-entries\" class=\"headerlink\" title=\"Object.entries\"></a>Object.entries</h2><p>以数组的方式输出对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const obj &#x3D; &#123;\n  foo: &#39;value1&#39;,\n  bar: &#39;value2&#39;,\n&#125;\n\nconsole.log(Object.entries(obj))\n&#x2F;&#x2F; [ [ &#39;foo&#39;, &#39;value1&#39; ], [ &#39;bar&#39;, &#39;value2&#39; ] ]\n\n&#x2F;&#x2F; 配合数组解构，可以直接遍历对象\nfor(const [key,value] of Object.entries(obj)) &#123;\n  console.log(key, value)\n&#125;\n&#x2F;&#x2F; foo value1\n&#x2F;&#x2F; bar value2</code></pre>\n\n<h2 id=\"Object-getOwnPropertyDescriptors\"><a href=\"#Object-getOwnPropertyDescriptors\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptors\"></a>Object.getOwnPropertyDescriptors</h2><p>使用 assign 复制对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const p1 &#x3D; &#123;\n  firstName: &#39;Lei&#39;,\n  lastName: &#39;Wang&#39;,\n\n  get fullName() &#123;\n    return this.firstName + &#39; &#39; + this.lastName\n  &#125;\n&#125;\nconsole.log(p1.fullName)\n&#x2F;&#x2F; Lei Wang\n\n&#x2F;&#x2F; 通过 assign 复制对象，不会把 get 方法复制，最后打印的 fullName 还是之前的 fullName\nconst p2 &#x3D; Object.assign(&#123;&#125;, p1)\np2.firstName &#x3D; &#39;hhh&#39;\nconsole.log(p2)\n&#x2F;&#x2F; &#123; firstName: &#39;hhh&#39;, lastName: &#39;Wang&#39;, fullName: &#39;Lei Wang&#39; &#125;</code></pre>\n\n<p>使用 getOwnPropertyDescriptors + defineProperties 复制对象<br>getOwnPropertyDescriptors: 所指定对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const p1 &#x3D; &#123;\n  firstName: &#39;Lei&#39;,\n  lastName: &#39;Wang&#39;,\n\n  get fullName() &#123;\n    return this.firstName + &#39; &#39; + this.lastName\n  &#125;\n&#125;\nconsole.log(p1.fullName)\n&#x2F;&#x2F; Lei Wang\n\nconst descriptors &#x3D; Object.getOwnPropertyDescriptors(p1)\nconsole.log(descriptors)\n&#x2F;&#x2F; &#123;\n&#x2F;&#x2F;   firstName: &#123;\n&#x2F;&#x2F;     value: &#39;Lei&#39;,\n&#x2F;&#x2F;       writable: true,\n&#x2F;&#x2F;       enumerable: true,\n&#x2F;&#x2F;       configurable: true\n&#x2F;&#x2F;   &#125;,\n&#x2F;&#x2F;   lastName: &#123;\n&#x2F;&#x2F;     value: &#39;Wang&#39;,\n&#x2F;&#x2F;       writable: true,\n&#x2F;&#x2F;       enumerable: true,\n&#x2F;&#x2F;       configurable: true\n&#x2F;&#x2F;   &#125;,\n&#x2F;&#x2F;   fullName: &#123;\n&#x2F;&#x2F;     get: [Function: get fullName],\n&#x2F;&#x2F;     set: undefined,\n&#x2F;&#x2F;       enumerable: true,\n&#x2F;&#x2F;       configurable: true\n&#x2F;&#x2F;   &#125;\n&#x2F;&#x2F; &#125;\n\nconst p2 &#x3D; Object.defineProperties(&#123;&#125;, descriptors)\np2.firstName &#x3D; &#39;hhh&#39;\nconsole.log(p2.fullName)\n&#x2F;&#x2F; hhh Wang</code></pre>\n\n<h2 id=\"String-prototype-padStart-String-prototype-padEnd\"><a href=\"#String-prototype-padStart-String-prototype-padEnd\" class=\"headerlink\" title=\"String.prototype.padStart / String.prototype.padEnd\"></a>String.prototype.padStart / String.prototype.padEnd</h2><p>String.prototype.padStart: 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，<br>以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p>\n<p>String.prototype.padEnd: 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），<br>返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const books &#x3D; &#123;\n  html: 5,\n  css: 16,\n  javascript: 128\n&#125;\n\nfor (const [name,count] of Object.entries(books)) &#123;\n  console.log(&#96;$&#123;name.padEnd(16, &#39;-&#39;)&#125;, $&#123;count.toString().padStart(3, 0)&#125;&#96;)\n&#125;</code></pre>\n\n<h2 id=\"在函数参数中添加尾逗号\"><a href=\"#在函数参数中添加尾逗号\" class=\"headerlink\" title=\"在函数参数中添加尾逗号\"></a>在函数参数中添加尾逗号</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function foo(\n  bar,\n  baz,\n) &#123;\n  \n&#125;\n\nconst a &#x3D; [\n  1,\n  2,\n]\n\nconst obj &#x3D; &#123;\n  a: 1,\n  b: 2,\n&#125;</code></pre>\n","text":"ECMAScript 2017 新特性Object.values输出对象的值 const obj &#x3D; &#123; foo: &#39;value1&#39;, bar: &#39;value2&#39;, &#125; console.log(Object.value...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"ECMASCRIPT","slug":"ECMASCRIPT","count":5,"path":"api/tags/ECMASCRIPT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ECMAScript-2017-%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">ECMAScript 2017 新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-values\"><span class=\"toc-text\">Object.values</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-entries\"><span class=\"toc-text\">Object.entries</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-getOwnPropertyDescriptors\"><span class=\"toc-text\">Object.getOwnPropertyDescriptors</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#String-prototype-padStart-String-prototype-padEnd\"><span class=\"toc-text\">String.prototype.padStart &#x2F; String.prototype.padEnd</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%B0%BE%E9%80%97%E5%8F%B7\"><span class=\"toc-text\">在函数参数中添加尾逗号</span></a></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"ECMAScript 2016 新特性","uid":"a0878e81d0c7b86746b25d401f215469","slug":"ecmascript2016","date":"2022-01-04T16:00:00.000Z","updated":"2022-09-28T07:19:23.107Z","comments":true,"path":"api/articles/ecmascript2016.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","text":"ECMAScript 2016 新特性Array.prototype.includes查找元素 const arr &#x3D; [&#39;foo&#39;, 1, NaN, false] &#x2F;&#x2F; 找到返回元素下标 console.log(arr.indexO...","link":"","photos":[],"count_time":{"symbolsCount":758,"symbolsTime":"1 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"ECMASCRIPT","slug":"ECMASCRIPT","count":5,"path":"api/tags/ECMASCRIPT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}},"next_post":{"title":"ECMAScript 2015 新特性","uid":"511aed350b5ec3b2d451257538725c66","slug":"ecmascript2015","date":"2021-12-31T03:30:00.000Z","updated":"2022-09-28T07:19:23.107Z","comments":true,"path":"api/articles/ecmascript2015.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","text":"ECMAScript 2015 新特性let let 声明的成员只会在所声明的块中生效 如果使用 var 声明变量，可以正常输出，var 关键字有变量提升的过程 if (true) &#123; var foo &#x3D; &#39;foo&#39; console.log(f...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"ECMASCRIPT","slug":"ECMASCRIPT","count":5,"path":"api/tags/ECMASCRIPT.json"},{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}}}