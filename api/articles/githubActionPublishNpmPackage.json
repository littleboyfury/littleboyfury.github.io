{"title":"GITHUB Action","uid":"c20284a31a34295c2d86d295e5cf6162","slug":"githubActionPublishNpmPackage","date":"2022-03-17T16:00:00.000Z","updated":"2022-09-28T07:19:23.109Z","comments":true,"path":"api/articles/githubActionPublishNpmPackage.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224111154475.png","content":"<h1 id=\"GitHub-action\"><a href=\"#GitHub-action\" class=\"headerlink\" title=\"GitHub action\"></a>GitHub action</h1><h2 id=\"自动发布-NPM-包\"><a href=\"#自动发布-NPM-包\" class=\"headerlink\" title=\"自动发布 NPM 包\"></a>自动发布 NPM 包</h2><h3 id=\"npm-配置-access-token\"><a href=\"#npm-配置-access-token\" class=\"headerlink\" title=\"npm 配置 access token\"></a>npm 配置 access token</h3><p>点击 npm 用户头像，选择 access tokens</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224111554219.png\" alt=\"image-20211224111554219\"></p>\n<p>点击 generate new token</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224111625450.png\" alt=\"image-20211224111625450\"></p>\n<p>选择 publish 点击 generate token</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224111701471.png\" alt=\"image-20211224111701471\"></p>\n<p>复制 token</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224111749033.png\" alt=\"image-20211224111749033\"></p>\n<h3 id=\"github-项目中配置-npm-access-token-环境变量\"><a href=\"#github-项目中配置-npm-access-token-环境变量\" class=\"headerlink\" title=\"github 项目中配置 npm access token 环境变量\"></a>github 项目中配置 npm access token 环境变量</h3><p>进入 github 项目，点击 settings，然后点击左侧 secrets，在右边点击 new repository secret</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224111857086.png\" alt=\"image-20211224111857086\"></p>\n<p>Name 输入想要的名字，这里设置为 NPM，value 则是在 npm 生成的 access token，点击 add secret</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224112021412.png\" alt=\"image-20211224112021412\"></p>\n<p>token 配置完成</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224112125595.png\" alt=\"image-20211224112125595\"></p>\n<h3 id=\"项目创建-github-action-执行文件\"><a href=\"#项目创建-github-action-执行文件\" class=\"headerlink\" title=\"项目创建 github action 执行文件\"></a>项目创建 github action 执行文件</h3><p>项目中创建配置文件</p>\n<p>项目根目录：<code>./github/workflows/publish.yml</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">name: Public Npm\n\non:\n  push:\n    # 指定工作分支名，后续一般是 main，或者自定义\n    branches: [ master ]\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n\n    name: &#39;publish npm&#39;\n\n    environment: npm\n\n    steps:\n      - uses: actions&#x2F;checkout@master\n\n      - name: Install and Build\n        # 如果需要编译，需要在 package.json 中配置相应的编译命令 npm run build\n        run: |\n          npm install\n          npm run build\n\n      - name: &#39;Publish to the npm registry&#39;\n        uses: primer&#x2F;publish@3.0.0\n        env:\n          GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;\n          # secrets.NPM 这是在 github 项目中创建的环境变量名\n          NPM_AUTH_TOKEN: $&#123;&#123; secrets.NPM &#125;&#125;\n        with:\n          # 默认的分支\n          default_branch: &#39;master&#39;</code></pre>\n\n<h3 id=\"修改代码和版本提交代码即可\"><a href=\"#修改代码和版本提交代码即可\" class=\"headerlink\" title=\"修改代码和版本提交代码即可\"></a>修改代码和版本提交代码即可</h3><p>代码修改后，执行定义版本即可，最后提交代码到 github 上即可自动运行。</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224112606602.png\" alt=\"image-20211224112606602\"></p>\n<h2 id=\"其他简单示例\"><a href=\"#其他简单示例\" class=\"headerlink\" title=\"其他简单示例\"></a>其他简单示例</h2><p>相关环境变量参考上文配置 npm access token</p>\n<h3 id=\"Node-相关\"><a href=\"#Node-相关\" class=\"headerlink\" title=\"Node 相关\"></a>Node 相关</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">on:\n  push:\n    branches: [ main ]\n\njobs:\n  install:\n    runs-on: ubuntu-latest\n    name: &#39;install dependencies and build image&#39;\n    strategy:\n      matrix:\n        # 设置 node 版本\n        node-version: [ 14.x ]\n    steps:\n      - uses: actions&#x2F;checkout@v3\n        with:\n          ref: master\n      # 使用版本\n      - uses: actions&#x2F;setup-node@v2\n        with:\n          node-version: $&#123;&#123;matrix.node-version&#125;&#125;\n          cache: &#39;npm&#39;\n      # 安装依赖\n      - name: Build Project\n        run: |\n          npm install\n          npm run build、\n      # 镜像构造\n      - name: Build image and Push\n        run: |\n          docker build -t $&#123;&#123;secrets.HOST&#125;&#125;&#x2F;$&#123;&#123;secrets.NAMESPACE&#125;&#125;&#x2F;$&#123;&#123;secrets.REPO&#125;&#125;:$&#123;GITHUB_SHA:0:8&#125; .\n          docker save $&#123;&#123;secrets.HOST&#125;&#125;&#x2F;$&#123;&#123;secrets.NAMESPACE&#125;&#125;&#x2F;$&#123;&#123;secrets.REPO&#125;&#125;:$&#123;GITHUB_SHA:0:8&#125; &gt; image.tar\n      # 上传镜像文件到下一个任务使用\n      - uses: actions&#x2F;upload-artifact@v2\n        with:\n          name: image\n          path: image.tar</code></pre>\n\n<h3 id=\"docker-打包\"><a href=\"#docker-打包\" class=\"headerlink\" title=\"docker 打包\"></a>docker 打包</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">on:\n  push:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    # 使用 docker 镜像\n    container: docker:18\n    name: &#39;Build docker image&#39;\n    # 表示在 install 任务后才会被执行\n    needs: [ install ]\n\n    steps:\n      # 下载上一个任务编译后的文件\n      - uses: actions&#x2F;download-artifact@v2\n        with:\n          name: skyfury-test\n          path: .\n      # 通过命令镜像 docker 打包和上传，tag 为 该次提交的 SHA 值前八位，镜像仓库可以国内云服务商申请，腾讯云个人免费\n      - name: Build image\n        run: |\n          docker login $HOST -u $USERNAME -p $PASSWORD\n          docker build -t $HOST&#x2F;$NAMESPACE&#x2F;$REPO:$&#123;GITHUB_SHA:0:8&#125; .\n          docker tag $HOST&#x2F;$NAMESPACE&#x2F;$REPO:$&#123;GITHUB_SHA:0:8&#125; $HOST&#x2F;$NAMESPACE&#x2F;$REPO:latest\n          docker push $HOST&#x2F;$NAMESPACE&#x2F;$REPO:$&#123;GITHUB_SHA:0:8&#125;\n          docker push $HOST&#x2F;$NAMESPACE&#x2F;$REPO:latest\n        env:\n          USERNAME: $&#123;&#123; secrets.USERNAME &#125;&#125;\n          PASSWORD: $&#123;&#123; secrets.PASSWORD &#125;&#125;\n          HOST: $&#123;&#123; secrets.HOST &#125;&#125;\n          NAMESPACE: $&#123;&#123; secrets.NAMESPACE &#125;&#125;\n          REPO: $&#123;&#123; secrets.REPO &#125;</code></pre>\n\n<h3 id=\"通过-ssh-部署\"><a href=\"#通过-ssh-部署\" class=\"headerlink\" title=\"通过 ssh 部署\"></a>通过 ssh 部署</h3><p>简单的通过 ssh 的方式进行部署项目，DEPLOY_TOKEN 为服务器上的私钥，经过 base64 编码，然后通过 ssh 进行镜像下载和运行容器。</p>\n<p>如果需要回滚容器，可以通过 docker 的 service，</p>\n<p>需要提前在服务器上创建 service<br><code>docker service create --with-registry-auth -p 7001:7001 --name $REPO $HOST/$NAMESPACE/$REPO:$&#123;GITHUB_SHA:0:8&#125;</code></p>\n<p>然后通过 action 进行更新<br><code>docker service update --image $HOST/$NAMESPACE/$REPO:$&#123;GITHUB_SHA:0:8&#125; $REPO&quot;</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">jobs:\n  publish:\n    runs-on: ubuntu-latest\n    # 可以部署到 k8s 的容器 kubectl，也包含 docker 命令\n    container: roffe&#x2F;kubectl\n    name: &#39;Deploy my blog&#39;\n    needs: [ install,build ]\n    steps:\n      - name: Deploy project\n        run: |\n          echo &quot;$DEPLOY_TOKEN&quot; | base64 -d &gt; id_rsa\n          chmod 700 id_rsa\n          apk add openssh\n          ssh -o StrictHostKeyChecking&#x3D;no -i id_rsa $SERVER_HOST &quot;\n          docker login $HOST -u $USERNAME -p $PASSWORD\n          docker pull $HOST&#x2F;$NAMESPACE&#x2F;$REPO:$&#123;GITHUB_SHA:0:8&#125;\n          docker stop $REPO\n          docker run -itd --rm --name $REPO -p 8001:80 $HOST&#x2F;$NAMESPACE&#x2F;$REPO:$&#123;GITHUB_SHA:0:8&#125;&quot;\n        env:\n          DEPLOY_TOKEN: $&#123;&#123; secrets.DEPLOY_TOKEN &#125;&#125;\n          USERNAME: $&#123;&#123; secrets.USERNAME &#125;&#125;\n          PASSWORD: $&#123;&#123; secrets.PASSWORD &#125;&#125;\n          HOST: $&#123;&#123; secrets.HOST &#125;&#125;\n          NAMESPACE: $&#123;&#123; secrets.NAMESPACE &#125;&#125;\n          REPO: $&#123;&#123; secrets.REPO &#125;&#125;\n          SERVER_HOST: $&#123;&#123; secrets.SERVER_HOST &#125;</code></pre>\n","text":"GitHub action自动发布 NPM 包npm 配置 access token点击 npm 用户头像，选择 access tokens 点击 generate new token 选择 publish 点击 generate token 复制 token github 项目...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"教程","slug":"教程","count":5,"path":"api/categories/教程.json"}],"tags":[{"name":"GITHUB","slug":"GITHUB","count":1,"path":"api/tags/GITHUB.json"},{"name":"NPM","slug":"NPM","count":2,"path":"api/tags/NPM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GitHub-action\"><span class=\"toc-text\">GitHub action</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83-NPM-%E5%8C%85\"><span class=\"toc-text\">自动发布 NPM 包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#npm-%E9%85%8D%E7%BD%AE-access-token\"><span class=\"toc-text\">npm 配置 access token</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#github-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AE-npm-access-token-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">github 项目中配置 npm access token 环境变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA-github-action-%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">项目创建 github action 执行文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E5%92%8C%E7%89%88%E6%9C%AC%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%8D%B3%E5%8F%AF\"><span class=\"toc-text\">修改代码和版本提交代码即可</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">其他简单示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Node-%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">Node 相关</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-%E6%89%93%E5%8C%85\"><span class=\"toc-text\">docker 打包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-ssh-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">通过 ssh 部署</span></a></li></ol></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"should 问题记录","uid":"1b9460a162c49b16fb160e6d1e730cf3","slug":"should","date":"2022-03-29T16:00:00.000Z","updated":"2022-09-28T07:19:23.111Z","comments":true,"path":"api/articles/should.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1648621531227.png","text":"Should.js 使用问题记录should.extend 方法should 的基本原理就是在 Object.prototype 上定义一个 should 对象，拦截 get，进行特殊处理。 should$1.extend &#x3D; function (propertyNam...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"原理","slug":"原理","count":2,"path":"api/categories/原理.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"TEST","slug":"TEST","count":1,"path":"api/tags/TEST.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}},"next_post":{"title":"ES Module","uid":"411e38e243c7e138bbc30ef1fc032baa","slug":"esModule","date":"2022-01-14T16:00:00.000Z","updated":"2022-09-28T07:19:23.108Z","comments":true,"path":"api/articles/esModule.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","text":"ES Module模块演变过程1. 基于文件的划分模块的方式将每个功能及其相关状态数据各自单独放到不同的文件中，约定每个文件就是一个独立的模块，使用某个模块就是将这个模块引入到页面中，然后直接调用模块中的成员（变量/函数） 缺点： 所有的模块都直接在全局工作，没有私有的空间，所有...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"ECMASCRIPT","slug":"ECMASCRIPT","count":5,"path":"api/tags/ECMASCRIPT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}}}