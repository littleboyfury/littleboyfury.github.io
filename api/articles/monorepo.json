{"title":"monorepo pnpm 打开方式","uid":"219378987043e4797346b5005bf2e4a1","slug":"monorepo","date":"2022-07-19T16:00:00.000Z","updated":"2022-09-28T07:19:23.110Z","comments":true,"path":"api/articles/monorepo.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","content":"<h1 id=\"使用-pnpm-workspace-管理-monorepo-项目\"><a href=\"#使用-pnpm-workspace-管理-monorepo-项目\" class=\"headerlink\" title=\"使用 pnpm workspace 管理 monorepo 项目\"></a>使用 pnpm workspace 管理 monorepo 项目</h1><h2 id=\"安装-pnpm\"><a href=\"#安装-pnpm\" class=\"headerlink\" title=\"安装 pnpm\"></a>安装 pnpm</h2><p><a href=\"https://www.pnpm.cn/installation\">pnpm 中文文档</a></p>\n<h2 id=\"什么是-monorepo\"><a href=\"#什么是-monorepo\" class=\"headerlink\" title=\"什么是 monorepo\"></a>什么是 monorepo</h2><p>Monorepo 是项目管理代码的方式之一，指的是一个大项目中包含了需要小项目或者模块，大概的样子</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">├── packages\n|   ├── pkg1\n|   |   ├── package.json\n|   ├── pkg2\n|   |   ├── package.json\n├── package.json</code></pre>\n\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm init</code></pre>\n\n<p>初始化一个项目，创建 package.json </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">.\n└── package.json</code></pre>\n\n<p>在根目录中创建 <code>pnpm-workspace.yaml</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">packages:\n  - &#39;packages&#x2F;**&#39;</code></pre>\n\n<p>在根目录中创建 <code>packages</code> 文件夹，并且在 <code>packages</code> 中创建子项目</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkdir packages\nmkdir packages&#x2F;core\nmkdir packages&#x2F;browser\n\n.\n├── package.json\n└── packages\n    ├── browser\n    └── core</code></pre>\n\n<h2 id=\"安装全局依赖\"><a href=\"#安装全局依赖\" class=\"headerlink\" title=\"安装全局依赖\"></a>安装全局依赖</h2><p>-D 表示安装到开发依赖，即 devDependencies, -w 表示在根目录安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm install typescript -Dw\n\n.\n├── node_modules\n│   └── typescript -&gt; .pnpm&#x2F;typescript@4.7.4&#x2F;node_modules&#x2F;typescript\n├── package.json\n├── packages\n│   ├── browser\n│   └── core\n├── pnpm-lock.yaml\n└── pnpm-workspace.yaml\n</code></pre>\n\n<h2 id=\"局部依赖\"><a href=\"#局部依赖\" class=\"headerlink\" title=\"局部依赖\"></a>局部依赖</h2><p>首选在每个子项目中初始化 package.json</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">.\n├── node_modules\n│   └── typescript -&gt; .pnpm&#x2F;typescript@4.7.4&#x2F;node_modules&#x2F;typescript\n├── package.json\n├── packages\n│   ├── browser\n│   │   └── package.json\n│   └── core\n│       └── package.json\n├── pnpm-lock.yaml\n└── pnpm-workspace.yaml\n</code></pre>\n\n<p>packages/browser 中的 package.json</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;@test&#x2F;browser&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  &#125;,\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;\n&#125;</code></pre>\n\n<p>packages/core 中的 package.json</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;@test&#x2F;core&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  &#125;,\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;\n&#125;</code></pre>\n\n<p>这里需要给每个子项目指定命名空间和包名，即 @test/core</p>\n<p>通过 filter 可以给指定的包安装依赖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm install loadsh -r --filter @test&#x2F;core</code></pre>\n\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;@test&#x2F;core&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  &#125;,\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: &#123;\n    &quot;lodash&quot;: &quot;^4.17.21&quot;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"两个包之间相互依赖\"><a href=\"#两个包之间相互依赖\" class=\"headerlink\" title=\"两个包之间相互依赖\"></a>两个包之间相互依赖</h2><p>browser 依赖 core</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pnpm i @test&#x2F;core -r --filter @test&#x2F;browser</code></pre>\n\n<p>browser 中就依赖上了 core，版本前面有 workspace 字样，表示本地引用，发布的时候就会被剔除掉</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;@test&#x2F;browser&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  &#125;,\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: &#123;\n    &quot;@test&#x2F;core&quot;: &quot;workspace:^1.0.0&quot;\n  &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"运行子包命令\"><a href=\"#运行子包命令\" class=\"headerlink\" title=\"运行子包命令\"></a>运行子包命令</h2><p>根目录 package.json</p>\n<p>使用 <code>pnpm -r --filter=@test/* run test</code> 来批量执行子包中的 test 脚本</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;test&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;pnpm -r --filter&#x3D;@test&#x2F;* run test&quot;\n  &#125;,\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;devDependencies&quot;: &#123;\n    &quot;typescript&quot;: &quot;^4.7.4&quot;\n  &#125;\n&#125;\n</code></pre>\n\n<p>@test/browser 中的 package.json</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;@test&#x2F;browser&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;test browser\\&quot;&quot;\n  &#125;,\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: &#123;\n    &quot;@test&#x2F;core&quot;: &quot;workspace:^1.0.0&quot;\n  &#125;\n&#125;\n</code></pre>\n\n<p>@test/core 中的 package.json</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;@test&#x2F;core&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;test core\\&quot;&quot;\n  &#125;,\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: &#123;\n    &quot;lodash&quot;: &quot;^4.17.21&quot;\n  &#125;\n&#125;\n</code></pre>\n\n<p>执行 <code>pnpm test</code>，即可得到输出结果</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&gt; pnpm -r --filter&#x3D;@test&#x2F;* run test\n\nScope: 2 of 3 workspace projects\npackages&#x2F;core test$ echo &quot;test core&quot;\n│ test core\n└─ Done in 13ms\npackages&#x2F;browser test$ echo &quot;test browser&quot;\n│ test browser\n└─ Done in 8ms\n</code></pre>\n","feature":true,"text":"使用 pnpm workspace 管理 monorepo 项目安装 pnpmpnpm 中文文档 什么是 monorepoMonorepo 是项目管理代码的方式之一，指的是一个大项目中包含了需要小项目或者模块，大概的样子 ├── packages | ├── pkg1 | | ├...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-pnpm-workspace-%E7%AE%A1%E7%90%86-monorepo-%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">使用 pnpm workspace 管理 monorepo 项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-pnpm\"><span class=\"toc-text\">安装 pnpm</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-monorepo\"><span class=\"toc-text\">什么是 monorepo</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">初始化项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">安装全局依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">局部依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E4%B8%AA%E5%8C%85%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">两个包之间相互依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E5%AD%90%E5%8C%85%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">运行子包命令</span></a></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"前端问题记录","uid":"135e69e6df7330d17285ee6191cf1397","slug":"frontendProblemLog","date":"2022-07-25T16:00:00.000Z","updated":"2022-09-28T07:19:23.108Z","comments":true,"path":"api/articles/frontendProblemLog.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1658822275066.png","text":"前端问题记录Mixed Content问题描述： Mixed Content: The page at &#39;https:&#x2F;&#x2F;xxx.com&#x2F;xxx&#39; was loaded over HTTPS, but requested an ins...","link":"","photos":[],"count_time":{"symbolsCount":482,"symbolsTime":"1 mins."},"categories":[{"name":"FRONTEND","slug":"FRONTEND","count":1,"path":"api/categories/FRONTEND.json"}],"tags":[{"name":"PROBLEM_LOG","slug":"PROBLEM-LOG","count":1,"path":"api/tags/PROBLEM-LOG.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}},"next_post":{"title":"git merge 原理","uid":"bc3e26c008b79bc9d58c7c60987d0cdd","slug":"gitMerge","date":"2022-05-18T16:00:00.000Z","updated":"2022-09-28T07:19:23.109Z","comments":true,"path":"api/articles/gitMerge.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652945378551.png","text":"GIT 合并基本原理二路合并二路合并就是逐行对比，如果行内容不同这报冲突。 本地提交 console.log(&#39;hello world&#39;) 其他提交 console.log(&#39;world hello&#39;) 假设这是修改了同一个文件，进行合并时，发现这...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"原理","slug":"原理","count":2,"path":"api/categories/原理.json"}],"tags":[{"name":"GIT","slug":"GIT","count":1,"path":"api/tags/GIT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}}}