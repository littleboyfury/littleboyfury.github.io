{"title":"TypeScript 类型","uid":"df69bf2a71d2ba449a532d953647cc2a","slug":"typescriptType","date":"2022-05-17T16:00:00.000Z","updated":"2022-09-28T07:19:23.111Z","comments":true,"path":"api/articles/typescriptType.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652855718873.png","content":"<h1 id=\"TypeScript-类型\"><a href=\"#TypeScript-类型\" class=\"headerlink\" title=\"TypeScript 类型\"></a>TypeScript 类型</h1><h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><h3 id=\"js-运行时类型\"><a href=\"#js-运行时类型\" class=\"headerlink\" title=\"js 运行时类型\"></a>js 运行时类型</h3><ul>\n<li>number</li>\n<li>boolean</li>\n<li>string</li>\n<li>object</li>\n<li>bigint</li>\n<li>symbol</li>\n<li>undefined</li>\n<li>null</li>\n</ul>\n<h3 id=\"ts-中的包装类型\"><a href=\"#ts-中的包装类型\" class=\"headerlink\" title=\"ts 中的包装类型\"></a>ts 中的包装类型</h3><ul>\n<li>Number</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Object</li>\n<li>Symbol</li>\n</ul>\n<h2 id=\"复合类型\"><a href=\"#复合类型\" class=\"headerlink\" title=\"复合类型\"></a>复合类型</h2><p>JS 中的 class Array TypeScript 都支持，新增了三种类型：元组（Tuple）、接口（interface）、枚举（Enum）</p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>元组（Tuple）就是元素个数和类型固定的数组类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type Tuple &#x3D; [number, string]</code></pre>\n\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>接口（interface）可以描述函数、对象、构造器的结构</p>\n<h4 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h4><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface IPerson &#123;\n  name: string\n  age: number\n&#125;\n\nclass Person extends IPerson &#123;\n  name: string\n  age: number\n&#125;\n\nconst obj: IPerson &#x3D; &#123;\n  name: &#39;sky&#39;,\n  age: 18\n&#125;</code></pre>\n\n<p>对象类型、class 类型在 TypeScript 中也叫做索引类型，可以索引多个元素类型的意思。<br>对象可以动态添加属性，如果不知道属性名，可以用索引签名：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface IPerson &#123;\n  [prop: string]: string | number\n&#125;\n\nconst obj: IPerson &#x3D; &#123;&#125;\nobj.name &#x3D; &#39;sky&#39;\nobj.age &#x3D; 18</code></pre>\n\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><ol>\n<li>普通函数</li>\n</ol>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface SayHi &#123;\n  (name: string): string\n&#125;\n\nconst func: SayHi &#x3D; function (name: string) &#123;\n  return &#39;hello &#39; + name\n&#125;</code></pre>\n\n<ol start=\"2\">\n<li>构造器函数</li>\n</ol>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface IPerson &#123;\n  name: string\n  age: number\n&#125;\n\ninterface PersonConstructor &#123;\n  new(name: string, age: number): IPerson\n&#125;\n\nfunction createPerson(ctor: PersonConstructor): IPerson &#123;\n  return new ctor(&#39;sky&#39;, 18)\n&#125;</code></pre>\n\n<p>总之，接口可以用来描述函数、构造器、索引类型（对象、class、数组）等复合类型。</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>枚举（Enum）是一系列值的复合：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">enum Week &#123;\n  MONDAY &#x3D; &#39;monday&#39;,\n  TUESDAY &#x3D; &#39;tuesday&#39;,\n  WEDNESDAY &#x3D; &#39;wednesday&#39;,\n  THURSDAY &#x3D; &#39;thursday&#39;,\n  FRIDAY &#x3D; &#39;friday&#39;,\n  SATURDAY &#x3D; &#39;saturday&#39;,\n  SUNDAY &#x3D; &#39;sunday&#39;\n&#125;\n\nconst week &#x3D; Week.MONDAY</code></pre>\n\n<h3 id=\"字面量类型\"><a href=\"#字面量类型\" class=\"headerlink\" title=\"字面量类型\"></a>字面量类型</h3><p>typescript 还支持字面量类型，也就是类似下面的类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type A1 &#x3D; 11\ntype A2 &#x3D; &#39;a2&#39;\ntype A3 &#x3D; &#123; a: 1 &#125;</code></pre>\n\n<p>字符串的字面量类型有两种</p>\n<ol>\n<li>普通的字符串字面量，比如 ‘aaa’</li>\n<li>模板字面量，比如下面的情况，表示该字符串只能以 aaa 开头</li>\n</ol>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type A4 &#x3D; &#96;aaa&#123;string&#125;&#96;\n\nconst a: A4 &#x3D; &#39;aaa1&#39;</code></pre>\n\n<h3 id=\"其他类型\"><a href=\"#其他类型\" class=\"headerlink\" title=\"其他类型\"></a>其他类型</h3><ul>\n<li>void 代表空，可以是 null 或者 undefined，一般用于函数返回值。</li>\n<li>any 是任意类型，任何类型都可以赋值给它，它也可以赋值给任何类型（除了 never）。</li>\n<li>unknown 是未知类型，任务类型都可以赋值给它，但是它不可以赋值给其他类型。</li>\n<li>never 代表不可达，比如函数抛异常的时候，返回值就是 never。</li>\n</ul>\n<h2 id=\"类型的装饰\"><a href=\"#类型的装饰\" class=\"headerlink\" title=\"类型的装饰\"></a>类型的装饰</h2><p>除了描述类型的结构外，TypeScript 还支持描述类型的属性，比如是否可选，是否只读等：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">interface IPerson &#123;\n  readonly name: string\n  age?: number\n&#125;\n\ntype tuple &#x3D; [string, number?]</code></pre>\n\n<h1 id=\"TypeScript-类型系统中的类型运算\"><a href=\"#TypeScript-类型系统中的类型运算\" class=\"headerlink\" title=\"TypeScript 类型系统中的类型运算\"></a>TypeScript 类型系统中的类型运算</h1><h2 id=\"条件-extends\"><a href=\"#条件-extends\" class=\"headerlink\" title=\"条件 extends ? :\"></a>条件 extends ? :</h2><p>TypeScript 条件判断是 <code>extends ? :</code>，叫做条件类型（Conditional Type），比如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type res &#x3D; 1 extends 2 ? true : false</code></pre>\n\n<p>等价于</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type res &#x3D; false</code></pre>\n\n<p>类似与 JavaScript 中的 if - else</p>\n<p>静态类型运算是没有什么太多的意义，可以用动态类型来运算，也就是对类型参数的运算。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type isTwo&lt;T&gt; &#x3D; T extends 2 ? true : false\n\ntype res &#x3D; isTwo&lt;1&gt;\ntype res1 &#x3D; isTwo&lt;2&gt;</code></pre>\n\n<p>等价于</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type res &#x3D; false\ntype res1 &#x3D; true</code></pre>\n\n<p>这类型也叫做<strong>高级类型，高级类型的特点是传入类型参数，经过一系列类型运算逻辑后，返回的新的类型</strong></p>\n<h2 id=\"推导-infer\"><a href=\"#推导-infer\" class=\"headerlink\" title=\"推导 infer\"></a>推导 infer</h2><p>infer 用于提取类型的一部分，比如提取元组类型的第一个元素：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type First&lt;Tuple extends unknown[]&gt; &#x3D; Tuple extends [infer T, ...infer R] ? T : never\n\ntype res &#x3D; First&lt;1, 2, 3&gt;</code></pre>\n\n<p>等价于</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type res &#x3D; 1</code></pre>\n\n<p>注意：第一个 extends 不是条件，条件类型是 <code>extends ? :</code>，这里的 extends 是约束的意思，也就是约束 Tuple 只能是数组类型，因为不知道数组的具体类型，所以用 unknown</p>\n<h2 id=\"联合\"><a href=\"#联合\" class=\"headerlink\" title=\"联合 |\"></a>联合 |</h2><p>联合类型（Union）类似 js 里的或运算符 |，但是作用于类型，代表类型可以是这几个类型之一。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type Union &#x3D; 1 | 2 | 3</code></pre>\n\n<h2 id=\"交叉-amp\"><a href=\"#交叉-amp\" class=\"headerlink\" title=\"交叉 &amp;\"></a>交叉 &amp;</h2><p>交叉类型（Intersection）类似 js 中的与运算符 &amp;，但是作用于类型，代表对类型的合并。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type ObjType &#x3D; &#123; a: number &#125; &amp; &#123; b: boolean &#125;</code></pre>\n\n<p>等价于</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type ObjType &#x3D; &#123;\n  a: number\n  b: boolean\n&#125;</code></pre>\n\n<p>注意，同一类型可以合并，不同的类型没法合并，会被舍弃：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type res &#x3D; &#39;aaa&#39; &amp; 2222</code></pre>\n\n<p>等价于</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type res &#x3D; never</code></pre>\n\n<h2 id=\"映射类型\"><a href=\"#映射类型\" class=\"headerlink\" title=\"映射类型\"></a>映射类型</h2><p>对象、class 在 TypeScript 对应的类型是索引类型（Index Type，如何对索引类型作修改？</p>\n<p>那就是映射类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type MapType&lt;T&gt; &#x3D; &#123;\n  [Key in keyof T]?: T[Key]\n&#125;</code></pre>\n\n<p>keyof T 是查询索引类型中的所有索引，叫做<strong>索引查询</strong><br>T[Key] 是取索引类型某个索引的值，叫做<strong>索引访问</strong></p>\n<p>in 是用于遍历联合类型的运算符。</p>\n<p>比如把一个索引类型的值变为 3 个元素的数组：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type MapType&lt;T&gt; &#x3D; &#123;\n  [Key in keyof T]: [T[Key], T[Key], T[Key]]\n&#125;\n\ntype res &#x3D; MapType&lt;&#123;\n  a: 1\n  b: 2\n&#125;&gt;</code></pre>\n\n<p>等价于</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type res &#x3D; &#123;\n  a: [1, 1, 1]\n  b: [2, 2, 2]\n&#125;</code></pre>\n\n<p>映射类型相当于把一个集合映射到了另一个集合</p>\n<p><img src=\"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652928331036.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_50/format,jpg\"></p>\n<p>除了值可以变化，索引也可以做变化，用 as 运算符，叫做<strong>重映射</strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type MapType&lt;T&gt; &#x3D; &#123;\n  [key in keyof T as &#96;$&#123;key &amp; string&#125;$&#123;key &amp; string&#125;$&#123;key &amp; string&#125;&#96;]: [T[key], T[key], T[key]]\n&#125;\ntype res &#x3D; MapType&lt;&#123; a: 1, b: 2 &#125;&gt;</code></pre>\n\n<p>等价于</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type res &#x3D; &#123;\n  aaa: [1, 1, 1],\n  bbb: [2, 2, 2],\n&#125;</code></pre>\n\n<p>这里 <code>&amp; string</code> 解释一下： 因为索引类型（对象、class 等）可以用 string、number 和 symbol 作为 key， 这里 keyof T 取出来的索引就是 <code>string|number|symbol</code><br>的联合类型。 和 string 取交叉部分就只剩下 string 了。</p>\n<p><img src=\"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652928940888.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_50/format,jpg\"></p>\n","text":"TypeScript 类型基本类型js 运行时类型 number boolean string object bigint symbol undefined null ts 中的包装类型 Number Boolean String Object Symbol 复合类型JS 中的 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"TYPESCRIPT","slug":"TYPESCRIPT","count":5,"path":"api/tags/TYPESCRIPT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TypeScript-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">TypeScript 类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#js-%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">js 运行时类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ts-%E4%B8%AD%E7%9A%84%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">ts 中的包装类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">复合类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%BB%84\"><span class=\"toc-text\">元组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">枚举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E9%9D%A2%E9%87%8F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">字面量类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">其他类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%A3%85%E9%A5%B0\"><span class=\"toc-text\">类型的装饰</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TypeScript-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">TypeScript 类型系统中的类型运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6-extends\"><span class=\"toc-text\">条件 extends ? :</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E5%AF%BC-infer\"><span class=\"toc-text\">推导 infer</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88\"><span class=\"toc-text\">联合 |</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E5%8F%89-amp\"><span class=\"toc-text\">交叉 &amp;</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">映射类型</span></a></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"git merge 原理","uid":"bc3e26c008b79bc9d58c7c60987d0cdd","slug":"gitMerge","date":"2022-05-18T16:00:00.000Z","updated":"2022-09-28T07:19:23.109Z","comments":true,"path":"api/articles/gitMerge.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652945378551.png","text":"GIT 合并基本原理二路合并二路合并就是逐行对比，如果行内容不同这报冲突。 本地提交 console.log(&#39;hello world&#39;) 其他提交 console.log(&#39;world hello&#39;) 假设这是修改了同一个文件，进行合并时，发现这...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"原理","slug":"原理","count":2,"path":"api/categories/原理.json"}],"tags":[{"name":"GIT","slug":"GIT","count":1,"path":"api/tags/GIT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}},"next_post":{"title":"TypeScript 系列","uid":"9aecd670d0e041c4ae0eeba9f323dfdf","slug":"typescriptSeries","date":"2022-05-17T16:00:00.000Z","updated":"2022-09-28T07:19:23.111Z","comments":true,"path":"api/articles/typescriptSeries.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1652855718873.png","text":"TypeScript 系列TypeScript 类型TypeScriptType ","link":"","photos":[],"count_time":{"symbolsCount":41,"symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"TYPESCRIPT","slug":"TYPESCRIPT","count":5,"path":"api/tags/TYPESCRIPT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"feature":true}}