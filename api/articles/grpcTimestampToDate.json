{"title":"GRPC TypeScript Timestamp to Date","uid":"a0308f1b66e47c358aa4918dab10369a","slug":"grpcTimestampToDate","date":"2021-12-28T16:00:00.000Z","updated":"2022-09-28T07:19:23.109Z","comments":true,"path":"api/articles/grpcTimestampToDate.json","keywords":null,"cover":"https://skyfuryblog.oss-cn-guangzhou.aliyuncs.com/img/1643424851939.png","content":"<h1 id=\"GRPC-TypeScript-TimeStamp-to-Date\"><a href=\"#GRPC-TypeScript-TimeStamp-to-Date\" class=\"headerlink\" title=\"GRPC TypeScript TimeStamp to Date\"></a>GRPC TypeScript TimeStamp to Date</h1><h2 id=\"修改原因\"><a href=\"#修改原因\" class=\"headerlink\" title=\"修改原因\"></a>修改原因</h2><p>protobufjs 社区中没有针对 google 的包做处理，已经有了多个 PR，如果独立维护 protobufjs 是有成本的，间接性修改源码，以减少维护成本，所以选取了一个改动较小的代码进行使用</p>\n<h2 id=\"支持传入-Date-类型\"><a href=\"#支持传入-Date-类型\" class=\"headerlink\" title=\"支持传入 Date 类型\"></a>支持传入 Date 类型</h2><ul>\n<li>根据 PR 修改源代码</li>\n</ul>\n<p>需要把 protobufjs 中的 converter.js 提取出来，根据 <a href=\"https://github.com/protobufjs/protobuf.js/pull/1076\">protobufjs PR</a> 修改源代码<br><a href=\"https://github.com/littleboyfury/ts-grpc-demo/blob/master/src/with_google_timestamp/lib/converter.js\">修改后的 converter.js</a></p>\n<ul>\n<li>加载 proto 文件</li>\n</ul>\n<p>核心思想是在加载 <code>@grpc/proto-loader</code> 之前，先把 <code>protobufjs/src/converter</code> 加载，然后修改 converter 中 toObject 和 fromObject 函数，再通过 import() 函数加载 <code>@grpc/proto-loader</code> ，这时就会使用修改后的 converter 进行对象转换。<br>如果直接使用 import 无法在导入 <code>@grpc/proto-loader</code> 之前修改，因为 import 会被提前。而 import() 函数是一个异步函数，CommonJs 可以直接使用 require() 函数进行加载。</p>\n<p><a href=\"https://github.com/littleboyfury/ts-grpc-demo/tree/master/proto\">proto 文件</a></p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">import * as path from &#39;path&#39;\nimport * as grpc from &#39;@grpc&#x2F;grpc-js&#39;\n&#x2F;&#x2F; 先加载 converter 文件\nimport * as converter from &#39;protobufjs&#x2F;src&#x2F;converter&#39;\nimport * as  converterLib from &#39;.&#x2F;lib&#x2F;converter&#39;\n\n&#x2F;&#x2F; 重写 converter 文件\nconverter.toObject &#x3D; converterLib.toObject\nconverter.fromObject &#x3D; converterLib.fromObject\n\nexport async function load() &#123;\n  &#x2F;&#x2F; 通过 import() 导入 @grpc&#x2F;proto-loader 包\n  &#x2F;&#x2F; 这时里面的 converter 已经被重写，即使用的修改后的文件\n  const protoLoader &#x3D; await import(&#39;@grpc&#x2F;proto-loader&#39;)\n  const packageDefinition &#x3D; protoLoader.loadSync(\n    path.join(__dirname, &#39;..&#x2F;..&#x2F;proto&#x2F;hello&#x2F;test.proto&#39;), &#123;\n      keepCase: true,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n    &#125;)\n  return grpc.loadPackageDefinition(packageDefinition) as any\n&#125;</code></pre>\n\n<ul>\n<li>server.ts</li>\n</ul>\n<p>server 端示例代码，此时 Timestamp 类型可以直接使用 Date 类型，并且不能使用之前的 Timestamp 类型</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">import * as grpc from &#39;@grpc&#x2F;grpc-js&#39;\nimport &#123; load &#125; from &#39;.&#x2F;proto&#39;\n\nfunction SayHello(call, callback) &#123;\n  console.log(call.request, &#39;call&#39;)\n  callback(null, &#123;\n    message: &#39;hhh&#39;,\n\n    &#x2F;&#x2F; google.protobuf.Timestamp 类型可以直接通过 new Date() 进行赋值\n    updated_time: new Date(),\n    time3: new Date(),\n    a: &#123;\n      time1: new Date(),\n      b: &#123;\n        time2: new Date(),\n      &#125;,\n    &#125;,\n  &#125;)\n&#125;\n\nasync function main() &#123;\n  const server &#x3D; new grpc.Server()\n  const hello &#x3D; await load()\n\n  server.addService(hello.hello.Greeter.service, &#123; SayHello &#125;)\n\n  server.bindAsync(&#39;127.0.0.1:56789&#39;, grpc.ServerCredentials.createInsecure(), () &#x3D;&gt; &#123;\n    server.start()\n    console.log(&#39;grpc server started&#39;)\n  &#125;)\n&#125;\n\nmain().then(res &#x3D;&gt; console.log(res, &#39;res&#39;))\n</code></pre>\n\n<ul>\n<li>client.ts</li>\n</ul>\n<p>client 端示例代码，此时 Timestamp 类型可以直接使用 Date 类型，并且不能使用之前的 Timestamp 类型</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">import * as grpc from &#39;@grpc&#x2F;grpc-js&#39;\nimport &#123; load &#125; from &#39;.&#x2F;proto&#39;\n\nconst deadline &#x3D; new Date()\ndeadline.setSeconds(deadline.getSeconds() + 50)\n\nasync function main() &#123;\n  const hello &#x3D; await load()\n  const client &#x3D; new hello.hello.Greeter(&#39;127.0.0.1:56789&#39;, grpc.credentials.createInsecure())\n\n  client.waitForReady(deadline, err &#x3D;&gt; &#123;\n    console.log(err, &#39;err&#39;)\n    console.log(&#39;client start ......&#39;)\n  &#125;)\n\n  client.SayHello(&#123;\n    message: &#39;Hello&#39;,\n    updated_time: new Date(),\n  &#125;, function (err, res) &#123;\n    if (err) &#123;\n      console.error(&#39;Error: &#39;, err)\n    &#125; else &#123;\n      console.log(res, &#39;response&#39;)\n    &#125;\n  &#125;)\n&#125;\n\nmain().then(res &#x3D;&gt; console.log(res,&#39;res&#39;))</code></pre>\n\n<ul>\n<li>运行</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ts-node server.ts\n#undefined res\n#grpc server started\n#&#123; message: &#39;Hello&#39;, updated_time: 2022-01-29T03:08:34.873Z &#125; call\nts-node client.ts\n#undefined res\n#undefined err\n#client start ......\n#&#123;\n#  message: &#39;hhh&#39;,\n#  updated_time: 2022-01-29T03:08:34.897Z,\n#  time3: 2022-01-29T03:08:34.897Z,\n#  a: &#123;\n#    time1: 2022-01-29T03:08:34.897Z,\n#    b: &#123; time2: 2022-01-29T03:08:34.897Z &#125;\n#  &#125;\n#&#125; response</code></pre>\n\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/littleboyfury/ts-grpc-demo\">ts-grpc-demo</a></p>\n<p>提供了三种使用方式</p>\n<ul>\n<li><a href=\"https://github.com/littleboyfury/ts-grpc-demo/tree/master/src/normal\">使用 Timestamp 类型</a></li>\n</ul>\n<p><code>npm run server</code><br><code>npm run client</code></p>\n<ul>\n<li><a href=\"https://github.com/littleboyfury/ts-grpc-demo/tree/master/src/useTypes\">使用 使用生成的 types</a>  </li>\n</ul>\n<p><code>npm run proto &amp;&amp; npm run timestampToDate</code><br><code>npm run serverType</code><br><code>npm run clientType</code></p>\n<ul>\n<li><a href=\"https://github.com/littleboyfury/ts-grpc-demo/tree/master/src/with_google_timestamp\">使用 Date 类型</a></li>\n</ul>\n<p><code>npm run serverGT</code><br><code>npm run clientGT</code></p>\n","text":"GRPC TypeScript TimeStamp to Date修改原因protobufjs 社区中没有针对 google 的包做处理，已经有了多个 PR，如果独立维护 protobufjs 是有成本的，间接性修改源码，以减少维护成本，所以选取了一个改动较小的代码进行使用 支持...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"后端","slug":"后端","count":2,"path":"api/categories/后端.json"}],"tags":[{"name":"TYPESCRIPT","slug":"TYPESCRIPT","count":5,"path":"api/tags/TYPESCRIPT.json"},{"name":"GRPC","slug":"GRPC","count":1,"path":"api/tags/GRPC.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GRPC-TypeScript-TimeStamp-to-Date\"><span class=\"toc-text\">GRPC TypeScript TimeStamp to Date</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">修改原因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E4%BC%A0%E5%85%A5-Date-%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">支持传入 Date 类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">项目地址</span></a></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript 系列","uid":"076515ed99fa4d813b6007ee6d9ea2b4","slug":"javascriptSeries","date":"2021-12-31T03:30:00.000Z","updated":"2022-09-28T07:19:23.110Z","comments":true,"path":"api/articles/javascriptSeries.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","text":"JavaScript 系列编程挑战ProgrammingChallenge 函数式编程FunctionalProgramming 简单 Promise 实现MyPromise ES2015 新特性ES2015 新特性 ES2016 新特性ES2016 新特性 ES2017 新特性...","link":"","photos":[],"count_time":{"symbolsCount":171,"symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":3,"path":"api/categories/编程.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"ECMASCRIPT","slug":"ECMASCRIPT","count":5,"path":"api/tags/ECMASCRIPT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"feature":true},"next_post":{"title":"egg-bull-board-adapter","uid":"985a6e9f306f90ab989025adc0137572","slug":"eggBullBoardAdapter","date":"2021-12-17T10:30:00.000Z","updated":"2022-09-28T07:19:23.108Z","comments":true,"path":"api/articles/eggBullBoardAdapter.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211217181813598.png","text":"egg-bull-board-adapteregg-bull-board 产生原因egg.js 中不能直接使用 @bull-board/koa 中的 KoaAdapter &#x2F;&#x2F; bull-board&#x2F;packages&#x2F;koa&#x2F;sr...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"后端","slug":"后端","count":2,"path":"api/categories/后端.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"TYPESCRIPT","slug":"TYPESCRIPT","count":5,"path":"api/tags/TYPESCRIPT.json"},{"name":"EGGJS","slug":"EGGJS","count":1,"path":"api/tags/EGGJS.json"},{"name":"BULL-BOARD","slug":"BULL-BOARD","count":1,"path":"api/tags/BULL-BOARD.json"},{"name":"BULLJS","slug":"BULLJS","count":1,"path":"api/tags/BULLJS.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}}}