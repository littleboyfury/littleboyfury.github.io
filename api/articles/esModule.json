{"title":"ES Module","uid":"411e38e243c7e138bbc30ef1fc032baa","slug":"esModule","date":"2022-01-14T16:00:00.000Z","updated":"2022-09-28T07:19:23.108Z","comments":true,"path":"api/articles/esModule.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","content":"<h1 id=\"ES-Module\"><a href=\"#ES-Module\" class=\"headerlink\" title=\"ES Module\"></a>ES Module</h1><h2 id=\"模块演变过程\"><a href=\"#模块演变过程\" class=\"headerlink\" title=\"模块演变过程\"></a>模块演变过程</h2><h3 id=\"1-基于文件的划分模块的方式\"><a href=\"#1-基于文件的划分模块的方式\" class=\"headerlink\" title=\"1. 基于文件的划分模块的方式\"></a>1. 基于文件的划分模块的方式</h3><p>将每个功能及其相关状态数据各自单独放到不同的文件中，约定每个文件就是一个独立的模块，使用某个<br>模块就是将这个模块引入到页面中，然后直接调用模块中的成员（变量/函数）</p>\n<p>缺点： 所有的模块都直接在全局工作，没有私有的空间，所有成员都可以在模块外部被访问或者修改，而且模块<br>一旦多了过后，容易产生命名冲突，另外无法管理模块与模块之间的依赖关系</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module-a.js\nvar name &#x3D; &#39;module-a&#39;\n\nfunction method1() &#123;\n  console.log(name + &#39;#method1&#39;)\n&#125;\n\nfunction method2() &#123;\n  console.log(name + &#39;#method2&#39;)\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module-b.js\nvar name &#x3D; &#39;module-b&#39;\n\nfunction method1() &#123;\n  console.log(name + &#39;#method1&#39;)\n&#125;\n\nfunction method2() &#123;\n  console.log(name + &#39;#method2&#39;)\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Modular evolution stage 1&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;script src&#x3D;&quot;module-a.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;module-b.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n    &#x2F;&#x2F; 命名冲突\n    method1()\n    &#x2F;&#x2F; 模块成员可以被修改\n    name &#x3D; &#39;foo&#39;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>结果输出：只输出了 module-b 中的方法，而且 name 也被修改</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20220113102910221.png\" alt=\"image-20220113102910221\"></p>\n<h3 id=\"2-挂载到每个模块的全局变量中\"><a href=\"#2-挂载到每个模块的全局变量中\" class=\"headerlink\" title=\"2. 挂载到每个模块的全局变量中\"></a>2. 挂载到每个模块的全局变量中</h3><p>在上一阶段的基础上，通过将每个模块【包裹】 为一个全局对象的形式实现，有点类似于为模块内的成员 添加了【命名空间】的感觉</p>\n<p>优点： 通过【命名空间】减少了命名冲突的可能</p>\n<p>缺点： 同样没有私有的空间，所有模块成员也可以在模块外部被访问或者修改，而且也无法管理模块之间的依赖关系</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module-a.js\nvar moduleA &#x3D; &#123;\n  name: &#39;module-a&#39;,\n\n  method1: function () &#123;\n    console.log(this.name + &#39;#method1&#39;)\n  &#125;,\n\n  method2: function () &#123;\n    console.log(this.name + &#39;#method2&#39;)\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module-b.js\n&#x2F;&#x2F; module b 相关状态数据和功能函数\n\nvar moduleB &#x3D; &#123;\n  name: &#39;module-b&#39;,\n\n  method1: function () &#123;\n    console.log(this.name + &#39;#method1&#39;)\n  &#125;,\n\n  method2: function () &#123;\n    console.log(this.name + &#39;#method2&#39;)\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Modular evolution stage 2&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;script src&#x3D;&quot;module-a.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;module-b.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n    moduleA.method1()\n    moduleB.method1()\n    &#x2F;&#x2F; 模块成员可以被修改\n    moduleA.name &#x3D; &#39;foo&#39;\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>a b 两个模块命名没有冲突，但是模块内的成员还是可以被修改</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20220113103548228.png\" alt=\"image-20220113103548228\"></p>\n<h3 id=\"3-立即执行函数表达式\"><a href=\"#3-立即执行函数表达式\" class=\"headerlink\" title=\"3. 立即执行函数表达式\"></a>3. 立即执行函数表达式</h3><p>使用立即执行函数表达式（IIFE：Immediately-Invoked Function Expression）为模块提供私有空间</p>\n<p>具体做法就是将每个模块成员都放在一个函数提供的私有作用域中，对于需要暴露给外部的成员，通过挂载<br>到全局对象上的方式实现，有了私有成员的概念，私有成员只能在模块成员内通过必报的形式访问</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module-a.js\n;(function () &#123;\n  var name &#x3D; &#39;module-a&#39;\n\n  function method1() &#123;\n    console.log(name + &#39;#method1&#39;)\n  &#125;\n\n  function method2() &#123;\n    console.log(name + &#39;#method2&#39;)\n  &#125;\n\n  window.moduleA &#x3D; &#123;\n    method1: method1,\n    mothod2: method2,\n  &#125;\n&#125;)()</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module-b.js\n;(function () &#123;\n  var name &#x3D; &#39;module-b&#39;\n\n  function method1() &#123;\n    console.log(name + &#39;#method1&#39;)\n  &#125;\n\n  function method2() &#123;\n    console.log(name + &#39;#method2&#39;)\n  &#125;\n\n  window.moduleB &#x3D; &#123;\n    method1: method1,\n    method2: method2\n  &#125;\n&#125;)()</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Modular evolution stage 3&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;script src&#x3D;&quot;module-a.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;module-b.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n    moduleA.method1()\n    moduleB.method1()\n    &#x2F;&#x2F; 模块私有成员无法访问\n    console.log(moduleA.name) &#x2F;&#x2F; &#x3D;&gt; undefined\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>只能访问到暴露出来的方法，无法访问模块内的私有成员</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20220113105633954.png\" alt=\"image-20220113105633954\"></p>\n<h3 id=\"4-利用-IIFE-参数作为依赖声明使用\"><a href=\"#4-利用-IIFE-参数作为依赖声明使用\" class=\"headerlink\" title=\"4. 利用 IIFE 参数作为依赖声明使用\"></a>4. 利用 IIFE 参数作为依赖声明使用</h3><p>在第三阶段的基础上，利用立即执行函数的参数传递模块依赖项，这使得每一个模块之间的关系变得更加明显</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module a 相关状态数据和功能函数\n;(function ($) &#123;\n  var name &#x3D; &#39;module-a&#39;\n\n  function method1() &#123;\n    console.log(name + &#39;#method1&#39;)\n    $(&#39;body&#39;).animate(&#123;margin: &#39;200px&#39;&#125;)\n  &#125;\n\n  function method2() &#123;\n    console.log(name + &#39;#method2&#39;)\n  &#125;\n\n  window.moduleA &#x3D; &#123;\n    method1: method1,\n    method2: method2\n  &#125;\n&#125;)(jQuery)</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module b 相关状态数据和功能函数\n\n;(function () &#123;\n  var name &#x3D; &#39;module-b&#39;\n\n  function method1() &#123;\n    console.log(name + &#39;#method1&#39;)\n  &#125;\n\n  function method2() &#123;\n    console.log(name + &#39;#method2&#39;)\n  &#125;\n\n  window.moduleB &#x3D; &#123;\n    method1: method1,\n    method2: method2\n  &#125;\n&#125;)()</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Modular evolution stage 4&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;jquery&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;module-a.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;module-b.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n    moduleA.method1()\n    moduleB.method1()\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20220113112006109.png\" alt=\"image-20220113112006109\"></p>\n<h3 id=\"AMD-模块化规范\"><a href=\"#AMD-模块化规范\" class=\"headerlink\" title=\"AMD 模块化规范\"></a>AMD 模块化规范</h3><p>Require.js 提供了 AMD 模块化规范，以及一个自动化模块加载器</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;Modular evolution stage 5&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1&gt;模块化规范的出现&lt;&#x2F;h1&gt;\n&lt;h2&gt;Require.js 提供了 AMD 模块化规范，以及一个自动化模块加载器&lt;&#x2F;h2&gt;\n&lt;script src&#x3D;&quot;lib&#x2F;require.js&quot; data-main&#x3D;&quot;main&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; main.js\nrequire.config(&#123;\n  paths: &#123;\n    &#x2F;&#x2F; 因为 jQuery 中定义的是一个名为 jquery 的 AMD 模块\n    &#x2F;&#x2F; 所以使用时必须通过 &#39;jquery&#39; 这个名称获取这个模块\n    &#x2F;&#x2F; 但是 jQuery.js 并不一定在同级目录下，所以需要指定路径\n    jquery: &#39;.&#x2F;lib&#x2F;jquery&#39;\n  &#125;\n&#125;)\n\nrequire([&#39;.&#x2F;modules&#x2F;module1&#39;], function (module1) &#123;\n  console.log(module1, &#39;module 1&#39;)\n  module1.start()\n&#125;)</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; .&#x2F;modules&#x2F;module1.js\n&#x2F;&#x2F; 因为 jQuery 中定义的是一个名为 jquery 的 AMD 模块\n&#x2F;&#x2F; 所以使用时必须通过 &#39;jquery&#39; 这个名称获取这个模块\n&#x2F;&#x2F; 但是 jQuery.js 并不在同级目录下，所以需要指定路径\ndefine(&#39;module1&#39;, [&#39;jquery&#39;, &#39;.&#x2F;module2&#39;], function ($, module2) &#123;\n  return &#123;\n    start: function () &#123;\n      $(&#39;body&#39;).animate(&#123;margin: &#39;200px&#39;&#125;)\n      module2()\n    &#125;\n  &#125;\n&#125;)</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; .&#x2F;modules&#x2F;module2.js\n&#x2F;&#x2F; 兼容 CMD 规范（类似 CommonJS 规范）\ndefine(function (require, exports, module) &#123;\n  &#x2F;&#x2F; 通过 require 引入依赖\n  var $ &#x3D; require(&#39;jquery&#39;)\n  &#x2F;&#x2F; 通过 exports 或者 module.exports 对外暴露成员\n  module.exports &#x3D; function () &#123;\n    console.log(&#39;module 2~&#39;)\n    $(&#39;body&#39;).append(&#39;&lt;p&gt;module2&lt;&#x2F;p&gt;&#39;)\n  &#125;\n&#125;)</code></pre>\n\n<h2 id=\"ES-Module-1\"><a href=\"#ES-Module-1\" class=\"headerlink\" title=\"ES Module\"></a>ES Module</h2><h3 id=\"浏览器中使用\"><a href=\"#浏览器中使用\" class=\"headerlink\" title=\"浏览器中使用\"></a>浏览器中使用</h3><h4 id=\"html-中使用\"><a href=\"#html-中使用\" class=\"headerlink\" title=\"html 中使用\"></a>html 中使用</h4><p>在 html 中 script 标签添加 <code>type=&quot;module&quot;</code>，表示可以以 ES Module 的标准执行其中的 JS 代码 ESM<br>自动采用了严格模式，忽略 ‘use strict’ 每个 ES Module 都是运行在单独的私有作用域中 ESM 可以通过 CORS 的方式请求外部的 JS<br>模块 ESM 的 script 可以添加 defer ，会延迟执行脚步，即页面加载完成后才会执行</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;\n    &lt;title&gt;ES Module - 模块的特性&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;!-- 通过给 script 添加 type &#x3D; module 的属性，就可以以 ES Module 的标准执行其中的 JS 代码了 --&gt;\n&lt;script type&#x3D;&quot;module&quot;&gt;\n    console.log(&#39;this is es module&#39;)\n&lt;&#x2F;script&gt;\n\n&lt;!-- 1. ESM 自动采用严格模式，忽略 &#39;use strict&#39; --&gt;\n&lt;script type&#x3D;&quot;module&quot;&gt;\n    console.log(this)\n&lt;&#x2F;script&gt;\n\n&lt;!-- 2. 每个 ES Module 都是运行在单独的私有作用域中 --&gt;\n&lt;script type&#x3D;&quot;module&quot;&gt;\n    var foo &#x3D; 100\n    console.log(foo)\n&lt;&#x2F;script&gt;\n&lt;script type&#x3D;&quot;module&quot;&gt;\n    console.log(foo)\n&lt;&#x2F;script&gt;\n\n&lt;!-- 3. ESM 是通过 CORS 的方式请求外部 JS 模块的 --&gt;\n&lt;!-- &lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;jquery@3.4.1&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt; --&gt;\n\n&lt;!-- 4. ESM 的 script 标签会延迟执行脚本 --&gt;\n&lt;script defer src&#x3D;&quot;demo.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;p&gt;需要显示的内容&lt;&#x2F;p&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>第二个 module 中 foo 无法获取到第一个 module 的值，表明作用域是分开的 script defer 标签下面有个 p 标签，页面显示了 p<br>标签的值才弹出对话框，表明脚步延迟执行</p>\n<p><img src=\"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20220113115624234.png\" alt=\"image-20220113115624234\"></p>\n<h4 id=\"js-中导出\"><a href=\"#js-中导出\" class=\"headerlink\" title=\"js 中导出\"></a>js 中导出</h4><ul>\n<li>通过 export 单个导出属性、函数和类</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module.js\n&#x2F;&#x2F; 导出\nexport var name &#x3D; &#39;foo module&#39;\n\nexport function hello() &#123;\n  console.log(&#39;hello&#39;)\n&#125;\n\nexport class Person &#123;\n&#125;\n\n&#x2F;&#x2F; app.js\n&#x2F;&#x2F; 导入\nimport &#123;name, hello, Person&#125; from &#39;.&#x2F;module.js&#39;\n\nconsole.log(name, hello, Person)</code></pre>\n\n<ul>\n<li>通过 export 导出一组成员</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module.js\n&#x2F;&#x2F; 导出\nvar name &#x3D; &#39;foo module&#39;\n\nfunction hello() &#123;\n  console.log(&#39;hello&#39;)\n&#125;\n\nclass Person &#123;\n&#125;\n\n&#x2F;&#x2F; 这种方式不是对象的方式，只是 export 的语法\nexport &#123;name, hello, Person&#125;\n\n&#x2F;&#x2F; app.js\n&#x2F;&#x2F; 导入\nimport &#123;name, hello, Person&#125; from &#39;.&#x2F;module.js&#39;\n\nconsole.log(name, hello, Person)</code></pre>\n\n<ul>\n<li>通过 export 导出默认值</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module.js\n&#x2F;&#x2F; 导出\nvar name &#x3D; &#39;foo module&#39;\nexport default name\n\n&#x2F;&#x2F; app.js\n&#x2F;&#x2F; 导入\n&#x2F;&#x2F; 通过默认值重命名\nimport &#123;default as fooName&#125; from &#39;.&#x2F;module.js&#39;\n\nconsole.log(fooName)\n\n&#x2F;&#x2F; 直接修改 default 的命名\nimport name1 from &#39;.&#x2F;module.js&#39;\n\nconsole.log(name1)</code></pre>\n\n<ul>\n<li>通过 export 导出，并且重命名</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module.js\n&#x2F;&#x2F; 导出\nvar name &#x3D; &#39;foo module&#39;\n\nfunction hello() &#123;\n  console.log(&#39;hello&#39;)\n&#125;\n\nexport &#123;\n  &#x2F;&#x2F; 重命名默认导出\n  name as default,\n  &#x2F;&#x2F; 更换 hello 的命名\n  hello as fooHello\n&#125;\n\n&#x2F;&#x2F; app.js\n&#x2F;&#x2F; 导入\nimport name1, &#123;fooHello&#125; from &#39;.&#x2F;module.js&#39;\n\nconsole.log(name1, fooHello)</code></pre>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>在 CommonJS 中是先将整个模块导入为一个对象，然后从对象中解构出需要的成员<br><code>const &#123; name, age &#125; = require(&#39;./module.js&#39;)</code></p>\n<p>在 ES Module 中 {} 是固定的语法，就是直接提取模块导出成员</p>\n<p><code>import &#123; name, age &#125; from &#39;./module.js</code></p>\n<p>在 ES Module 中导入成员并不是复制一个副本，而是直接导入模块成员的引用地址，也就是说 import 得到的变量与 export<br>导出的变量在内存中是同一块空间。一旦模块中成员修改了，导入的地方也会修改。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;name, age&#125; from &#39;.&#x2F;module.js&#39;\n\nsetTimeout(() &#x3D;&gt; &#123;\n  console.log(name, age)\n&#125;)</code></pre>\n\n<p>导入模块变量是只读的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;name&#125; from &#39;.&#x2F;module.js&#39;\n\nname &#x3D; &#39;tom&#39; &#x2F;&#x2F; 报错</code></pre>\n\n<p>如果导入的是一个对象，对象的属性读写不受影响<br><code>name.xxx = xxx</code></p>\n<p><code>export &#123;&#125;</code> 不是一个对象字面量，只是语法上的规则而已</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var name &#x3D; &#39;jack&#39;\nvar age &#x3D; 18\nexport &#123;name, age&#125;\n\n&#x2F;&#x2F; 错误用法\n&#x2F;&#x2F; export name\n&#x2F;&#x2F; export &#39;foo&#39; </code></pre>\n\n<h4 id=\"js-中导入\"><a href=\"#js-中导入\" class=\"headerlink\" title=\"js 中导入\"></a>js 中导入</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; &#x2F;test&#x2F;module.js\nvar name &#x3D; &#39;jack&#39;\nvar age &#x3D; 18\n\nexport &#123;name, age&#125;\n\nconsole.log(&#39;module action&#39;)\n\nexport default &#39;default export&#39;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; &#x2F;test&#x2F;utils&#x2F;index.js\nexport function lowercase(input) &#123;\n  return input.toLowerCase()\n&#125;</code></pre>\n\n<ul>\n<li>后缀不能省略</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; from 后面需要跟文件的后缀，不能去除\nimport &#123;name&#125; from &#39;.&#x2F;module&#39;\n\n&#x2F;&#x2F; 正确用法\nimport &#123;name&#125; from &#39;.&#x2F;module.js&#39;\n\nconsole.log(name)</code></pre>\n\n<ul>\n<li>index.js 也不能省略</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 错误导入\nimport &#123;lowercase&#125; from &#39;utils&#39;\n\n&#x2F;&#x2F; 正确导入\nimport &#123;lowercase&#125; from &#39;utils&#x2F;index.js&#39;\n\nconsole.log(lowercase(&#39;HHH&#39;))</code></pre>\n\n<ul>\n<li>from 后面导入包内的文件不能省略 ./</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 这样导入会被认为是导入了第三方包，回去 node_modules 中找包\nimport &#123;name&#125; from &#39;module.js&#39;\n\n&#x2F;&#x2F; .&#x2F; 不能省略\nimport &#123;name&#125; from &#39;.&#x2F;module.js&#39;\n\n&#x2F;&#x2F; 或者使用项目为绝对路径的方式导入\nimport &#123;name&#125; from &#39;&#x2F;test&#x2F;module.js&#39;\n\n&#x2F;&#x2F; 也可以通过网络的方式导入包\nimport &#123;name&#125; from &#39;http:&#x2F;&#x2F;localhost:3000&#x2F;test&#x2F;module.js&#39;\n\nconsole.log(name)</code></pre>\n\n<ul>\n<li>只导包，不使用</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;&#125; from &#39;.&#x2F;module.js&#39;\n\nimport &#39;.&#x2F;module.js&#39;</code></pre>\n\n<ul>\n<li>导出包中所有的内容</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import * as mod from &#39;.&#x2F;module.js&#39;\n\nconsole.log(mod)</code></pre>\n\n<ul>\n<li>不能通过变量或者条件判断的方式导入包</li>\n</ul>\n<p>错误导包</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const modulePath &#x3D; &#39;.&#x2F;module.js&#39;\nimport &#123;name&#125; from &#39;modulePaht&#39;\n\n\nif (true) &#123;\n  &#x2F;&#x2F; 错误导入方式\n  &#x2F;&#x2F; import &#123;name&#125; from &#39;.&#x2F;module.js&#39;\n&#125;</code></pre>\n\n<ul>\n<li>通过 import() 函数动态导入包</li>\n</ul>\n<p>import()，函数返回了一个 Promise，可以在 then 中接受到这个模块对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import(&#39;.&#x2F;module.js&#39;).then(module &#x3D;&gt; &#123;\n  console.log(module)\n&#125;)</code></pre>\n\n<ul>\n<li>提取包中的值和默认的值</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;name, age, default as title&#125; from &#39;.&#x2F;module.js&#39;\nimport abc, &#123;name, age&#125; from &#39;.&#x2F;module.js&#39;\n\n&#x2F;&#x2F; abc 和 title 都是 default 的值</code></pre>\n\n<h4 id=\"导入与导出\"><a href=\"#导入与导出\" class=\"headerlink\" title=\"导入与导出\"></a>导入与导出</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; components&#x2F;avatar.js\nexport var Avatar &#x3D; &#39;Avatar Component&#39;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; components&#x2F;button.js\nvar Button &#x3D; &#39;Button Component&#39;\n\nexport default Button</code></pre>\n\n<p>把两个组件合并到一个文件中进行导出</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; components&#x2F;index.js\nimport Button from &#39;.&#x2F;button.js&#39;\nimport &#123;Avatar&#125; from &#39;.&#x2F;avatar.js&#39;\n\nexport &#123;Button, Avatar&#125;</code></pre>\n\n<p>或者可以通过 export 直接导出</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export &#123;default as Button&#125; from &#39;.&#x2F;button.js&#39;\nexport &#123;Avatar&#125; from &#39;.&#x2F;avatar.js&#39;</code></pre>\n\n<h3 id=\"node-中使用\"><a href=\"#node-中使用\" class=\"headerlink\" title=\"node 中使用\"></a>node 中使用</h3><h4 id=\"node-使用-ESM\"><a href=\"#node-使用-ESM\" class=\"headerlink\" title=\"node 使用 ESM\"></a>node 使用 ESM</h4><p>在 node 中使用 esModule 需要将扩展名由 .js 改为 .mjs<br>启动的时候需要额外添加 <code>--experimental-modules</code> 参数<br>可以通过 ESM 的方式导入 node 的内置模块，内置模块兼容了 ESM 的提取成员的方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;foo, bar&#125; from &#39;.&#x2F;module.mjs&#39;\n\nconsole.log(foo, bar)\n\n&#x2F;&#x2F; 可以通过 esm 加载内置模块\nimport fs from &#39;fs&#39;\n\nfs.writeFileSync(&#39;.&#x2F;foo.txt&#39;, &#39;es module working&#39;)\n\n&#x2F;&#x2F; 也可以直接提取模块内的成员，内置模块兼容了 ESM 的提取成员的方式\nimport &#123;writeFileSync&#125; from &#39;fs&#39;\n\nwriteFileSync(&#39;.&#x2F;bar.txt&#39;, &#39;es module working&#39;)\n\n&#x2F;&#x2F; 对于第三方的 NPM 模块也可以通过 ESM 加载\nimport _ from &#39;lodash&#39;\n\nconsole.log(_.camelCase(&#39;ES Module&#39;))\n\n&#x2F;&#x2F; 不支持，第三方模块都是导出默认成员\n&#x2F;&#x2F; import &#123;camelCase&#125; from &#39;lodash&#39;\n\n&#x2F;&#x2F; console.log(camelCase(&#39;ES Module&#39;))</code></pre>\n\n<h4 id=\"esModule-中使用-commonJS\"><a href=\"#esModule-中使用-commonJS\" class=\"headerlink\" title=\"esModule 中使用 commonJS\"></a>esModule 中使用 commonJS</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; es-module.mjs\nimport mod from &#39;.&#x2F;commonjs.js&#39;\n\nconsole.log(mod)\n&#x2F;&#x2F; &#123; foo: &#39;commonjs exports value&#39; &#125;\n\n&#x2F;&#x2F; 不能从 CommonJS 中直接提取成员，import 不是解构导出对象\n&#x2F;&#x2F; 错误导出方式\nimport &#123;foo&#125; from &#39;.&#x2F;commonjs.js&#39;\n\nconsole.log(foo)</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; commonjs.js\n&#x2F;&#x2F; CommonJS 模块始终只会导出一个默认值\nmodule.exports &#x3D; &#123;\n  foo: &#39;commonjs exports value&#39;\n&#125;</code></pre>\n\n<h4 id=\"commonJS-中不能使用-esModule\"><a href=\"#commonJS-中不能使用-esModule\" class=\"headerlink\" title=\"commonJS 中不能使用 esModule\"></a>commonJS 中不能使用 esModule</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; es-module.mjs\nexport const foo &#x3D; &#39;es module export value&#39;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; commonjs.js\n\n&#x2F;&#x2F; 报错，不能在 CommonJS 模块中通过 require 载入 ES Module\nconst mod &#x3D; require(&#39;.&#x2F;es-module.mjs&#39;)\nconsole.log(mod)</code></pre>\n\n<h4 id=\"esModule-和-commonJS-的区别\"><a href=\"#esModule-和-commonJS-的区别\" class=\"headerlink\" title=\"esModule 和 commonJS 的区别\"></a>esModule 和 commonJS 的区别</h4><p>ESM 中没有模块全局成员，以下变量全部报错</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; esm.mjs\n&#x2F;&#x2F; 加载模块函数\nconsole.log(require)\n\n&#x2F;&#x2F; 模块对象\nconsole.log(module)\n\n&#x2F;&#x2F; 导出对象别名\nconsole.log(exports)\n\n&#x2F;&#x2F; 当前文件夹的绝对路径\nconsole.log(__filename)\n\n&#x2F;&#x2F; 当前文件所在的目录\nconsole.log(__dirname)</code></pre>\n\n<p>ESM 中获取 __filename 和 __dirname</p>\n<p>import.meta.url 中为 url 形式的文件路径，需要转为当前的绝对路径</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;fileURLToPath&#125; from &#39;url&#39;\nimport &#123;dirname&#125; from &#39;path&#39;\n\nconst __filename &#x3D; fileURLToPath(import.meta.url)\nconst __dirname &#x3D; dirname(__filename)\nconsole.log(__filename)\nconsole.log(__dirname)</code></pre>\n\n<h4 id=\"定义该项目为-ES-Module\"><a href=\"#定义该项目为-ES-Module\" class=\"headerlink\" title=\"定义该项目为 ES Module\"></a>定义该项目为 ES Module</h4><p>将 package.json 的 type 改为 module，这该项目所有的 js 文件都遵循 ES Module，不再需要 .mjs 后缀<br>CommonJS 的使用这需要改后缀为 .cjs</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;type&quot;: &quot;module&quot;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; module.js\nexport const foo &#x3D; &#39;hello&#39;\nexport const bar &#x3D; &#39;world&#39;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; index.js\nimport &#123;foo, bar&#125; from &#39;.&#x2F;module.js&#39;\nimport * as mod from &#39;.&#x2F;common.cjs&#39;\n\nconsole.log(mod)\nconsole.log(foo, bar)</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; common.cjs\nconst path &#x3D; require(&#39;path&#39;)\nconsole.log(path.join(__dirname, &#39;foo&#39;))\n\nmodule.exports &#x3D; &#123;\n  foo: &#39;hhh&#39;\n&#125;</code></pre>\n\n\n","text":"ES Module模块演变过程1. 基于文件的划分模块的方式将每个功能及其相关状态数据各自单独放到不同的文件中，约定每个文件就是一个独立的模块，使用某个模块就是将这个模块引入到页面中，然后直接调用模块中的成员（变量/函数） 缺点： 所有的模块都直接在全局工作，没有私有的空间，所有...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"ECMASCRIPT","slug":"ECMASCRIPT","count":5,"path":"api/tags/ECMASCRIPT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ES-Module\"><span class=\"toc-text\">ES Module</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">模块演变过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E5%88%92%E5%88%86%E6%A8%A1%E5%9D%97%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">1. 基于文件的划分模块的方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%8C%82%E8%BD%BD%E5%88%B0%E6%AF%8F%E4%B8%AA%E6%A8%A1%E5%9D%97%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%B8%AD\"><span class=\"toc-text\">2. 挂载到每个模块的全局变量中</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">3. 立即执行函数表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%88%A9%E7%94%A8-IIFE-%E5%8F%82%E6%95%B0%E4%BD%9C%E4%B8%BA%E4%BE%9D%E8%B5%96%E5%A3%B0%E6%98%8E%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">4. 利用 IIFE 参数作为依赖声明使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AMD-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">AMD 模块化规范</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ES-Module-1\"><span class=\"toc-text\">ES Module</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">浏览器中使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#html-%E4%B8%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">html 中使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#js-%E4%B8%AD%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">js 中导出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#js-%E4%B8%AD%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">js 中导入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">导入与导出</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#node-%E4%B8%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">node 中使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#node-%E4%BD%BF%E7%94%A8-ESM\"><span class=\"toc-text\">node 使用 ESM</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#esModule-%E4%B8%AD%E4%BD%BF%E7%94%A8-commonJS\"><span class=\"toc-text\">esModule 中使用 commonJS</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#commonJS-%E4%B8%AD%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8-esModule\"><span class=\"toc-text\">commonJS 中不能使用 esModule</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#esModule-%E5%92%8C-commonJS-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">esModule 和 commonJS 的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E8%AF%A5%E9%A1%B9%E7%9B%AE%E4%B8%BA-ES-Module\"><span class=\"toc-text\">定义该项目为 ES Module</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}},"mapped":true,"prev_post":{"title":"GITHUB Action","uid":"c20284a31a34295c2d86d295e5cf6162","slug":"githubActionPublishNpmPackage","date":"2022-03-17T16:00:00.000Z","updated":"2022-09-28T07:19:23.109Z","comments":true,"path":"api/articles/githubActionPublishNpmPackage.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211224111154475.png","text":"GitHub action自动发布 NPM 包npm 配置 access token点击 npm 用户头像，选择 access tokens 点击 generate new token 选择 publish 点击 generate token 复制 token github 项目...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"教程","slug":"教程","count":5,"path":"api/categories/教程.json"}],"tags":[{"name":"GITHUB","slug":"GITHUB","count":1,"path":"api/tags/GITHUB.json"},{"name":"NPM","slug":"NPM","count":2,"path":"api/tags/NPM.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}},"next_post":{"title":"ECMAScript 2016 新特性","uid":"a0878e81d0c7b86746b25d401f215469","slug":"ecmascript2016","date":"2022-01-04T16:00:00.000Z","updated":"2022-09-28T07:19:23.107Z","comments":true,"path":"api/articles/ecmascript2016.json","keywords":null,"cover":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211212224316297.png","text":"ECMAScript 2016 新特性Array.prototype.includes查找元素 const arr &#x3D; [&#39;foo&#39;, 1, NaN, false] &#x2F;&#x2F; 找到返回元素下标 console.log(arr.indexO...","link":"","photos":[],"count_time":{"symbolsCount":758,"symbolsTime":"1 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JAVASCRIPT","slug":"JAVASCRIPT","count":14,"path":"api/tags/JAVASCRIPT.json"},{"name":"ECMASCRIPT","slug":"ECMASCRIPT","count":5,"path":"api/tags/ECMASCRIPT.json"}],"author":{"name":"SKY","slug":"sky","avatar":"https://cycling-bucket.oss-cn-shenzhen.aliyuncs.com/littleboy/image-20211223171018733.png","link":"/","description":"Welcome to sky home","socials":{"github":"https://github.com/littleboyfury","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_38916811","juejin":"https://juejin.cn/user/2049948533144104","customs":{}}}}}